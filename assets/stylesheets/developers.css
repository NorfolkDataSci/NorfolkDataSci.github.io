@charset "UTF-8";
html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after {
  content: "";
  content: none; }

q:before, q:after {
  content: "";
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * This file sets default styles.
 * It is basically our version of normalize.css.
 */
body {
  font: 12px/1.2 'Helvetica Neue', Helvetica, Arial, sans-serif;
  color: #333; }

/*
 * Minor kludge to keep pyscss's error block above everything else
 * (though below dev toolbar)
 */
body:before {
  z-index: 10000; }

button,
input,
optgroup,
select,
textarea {
  color: inherit;
  font: inherit;
  margin: 0;
  font-weight: normal; }

b,
strong,
h1,
h2,
h3,
h4,
h5 {
  font-weight: bold; }

pre {
  font-family: Monaco, Consolas, 'Courier New', monospace; }

th,
td {
  vertical-align: middle; }

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/*
 * Remove the gap between images and borders
 * on image containers: h5bp.com/e
 */
img {
  vertical-align: middle; }

.ltie8 button,
.ltie8 input {
  overflow: visible; }

/** IE placeholder text for inputs */
.input-placeholder {
  color: #999; }

input::-webkit-input-placeholder,
textarea::-webkit-input-placeholder {
  color: #999; }

input:-moz-placeholder,
textarea:-moz-placeholder {
  color: #999; }

/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
.section-header {
  margin-bottom: 11px;
  border-bottom: 1px solid #e5e5e1; }

.section-header_search .yform {
  margin-bottom: 0; }

.section-header_tabs {
  margin-top: 18px;
  border-top: 1px solid #e5e5e1; }

.section-header_block {
  *zoom: 1;
  margin: 0 -15px; }
  .section-header_block:before, .section-header_block:after {
    content: " ";
    display: table; }
  .section-header_block:after {
    clear: both; }
  @media only screen and (max-width: 989px) {
    .responsive .section-header_block {
      margin: 0 auto; } }

.section-header_block-main {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 66.66667%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 459px; }
  @media only screen and (max-width: 989px) {
    .responsive .section-header_block-main {
      float: none;
      width: auto;
      clear: both;
      margin: 15px 0 0;
      padding: 0;
      border: 0;
      -webkit-box-shadow: none;
      box-shadow: none; } }
  .responsive .section-header_block-main:first-child {
    margin-top: 0; }

.section-header_block-side {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 33.33333%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 211px; }
  @media only screen and (max-width: 989px) {
    .responsive .section-header_block-side {
      float: none;
      width: auto;
      clear: both;
      margin: 15px 0 0;
      padding: 0;
      border: 0;
      -webkit-box-shadow: none;
      box-shadow: none; } }
  .responsive .section-header_block-side:first-child {
    margin-top: 0; }

.section-header--complex .section-header_title,
.section-header--complex .ytype .section-header_title {
  margin-bottom: 0; }
.section-header--complex .section-header_block-main,
.section-header--complex .section-header_block-side {
  float: none;
  width: auto;
  clear: both;
  margin: 15px 0 0;
  padding: 0;
  border: 0;
  -webkit-box-shadow: none;
  box-shadow: none;
  margin: 0;
  width: 1%; }
  @media only screen and (max-width: 989px) {
    .responsive .section-header--complex .section-header_block-main, .responsive
    .section-header--complex .section-header_block-side {
      width: auto; } }
.ie .section-header--complex .section-header_block-side {
  float: right; }

.section-header--spaced {
  padding-bottom: 11px; }

/*
 * TODO(msamuels|2014-12-04): Use ytype on www by default
 *
 * These mixins are used to apply ytype styles since www and admin
 * site are not yet ready for ytype everywhere and we scope with the ytype class.
 * To use ytype on a site by default, include these mixins on body.
 */
.ytype {
  font-size: 14px;
  line-height: 1.28571em;
  color: #333;
  /*
   * For every heading, we added a class solely for styling purposes.
   * This can be useful in some cases, but they are not meant to
   * replace headings. Only add this class if a piece of text needs
   * to look like a heading but actually isn't.
   */ }
  .ytype h1, .ytype .h1, .ytype h2, .ytype .h2, .ytype h3, .ytype .h3, .ytype h4, .ytype .h4 {
    margin-bottom: 6px;
    word-wrap: break-word;
    word-break: break-word;
    overflow-wrap: break-word;
    -webkit-hyphens: auto;
    -moz-hyphens: auto;
    hyphens: auto; }
    .ytype h1 b, .ytype .h1 b, .ytype h2 b, .ytype .h2 b, .ytype h3 b, .ytype .h3 b, .ytype h4 b, .ytype .h4 b {
      font-weight: normal;
      color: #333; }
  .ytype h2, .ytype .h2, .ytype h3, .ytype .h3 {
    color: #c41200; }
    .ytype h2.alternate, .ytype .h2.alternate, .ytype h3.alternate, .ytype .h3.alternate {
      color: #333; }
  .ytype h1, .ytype .h1 {
    padding-top: 6px;
    font-size: 30px;
    line-height: 1.2em;
    color: #333; }
  .ytype h2, .ytype .h2 {
    font-size: 21px;
    line-height: 1.28571em; }
  .ytype h3, .ytype .h3 {
    font-size: 16px;
    line-height: 1.3125em; }
  .ytype h4, .ytype .h4 {
    font-size: 14px;
    line-height: 1.28571em;
    color: #333; }
  .ytype .h2,
  .ytype .h3,
  .ytype .h4 {
    padding-top: 0; }

p {
  margin-bottom: 12px; }

a {
  color: #3b65a7;
  text-decoration: none; }
  a:hover {
    text-decoration: underline; }

small {
  font-size: 12px;
  line-height: 1.5em; }

address {
  display: block;
  font-style: normal; }

.subtle-text {
  color: #999;
  font-weight: normal; }

.time-stamp {
  font-size: 12px;
  line-height: 1.5em;
  color: #999; }

.legal-copy {
  color: #555;
  font-size: 12px;
  line-height: 1.5em; }

.bullet-before:before,
.bullet-after:after {
  content: "•";
  position: relative;
  top: -1px;
  margin: 0 3px;
  color: #999;
  font-size: 10px;
  line-height: 18px; }

blockquote {
  border-left: 6px solid;
  border-color: #e5e5e1;
  border-color: rgba(0, 0, 0, 0.1);
  padding-left: 18px;
  margin-bottom: 12px; }

.hanging-quote {
  text-indent: -0.42em; }

.ltie8 .bullet-before {
  margin-left: 12px; }

.ltie8 .bullet-after {
  margin-right: 12px; }

/** Add editorial class for text-heavy, largely static pages. */
.editorial p {
  margin-bottom: 24px; }
.editorial .catcher {
  margin: 18px 0;
  font-size: 18px;
  line-height: 1.33333em; }
  .editorial .catcher b {
    color: #c41200; }
.editorial .page-breaker {
  margin-top: 48px; }

/**
 * Flexbox Mixins
 * Uses a mix of old and new syntaxes for maximum support.
 * See http://css-tricks.com/using-flexbox/
 *
 * Caution: flexbox implementations are still inconsistent across browsers,
 * so as always it's important to test your code!
 */
/*
* 1. OLD - iOS 6-, Android, Safari 3.1-6
* 2. OLD - Firefox 21-
* 3. TWEENER - IE 10
* 4. NEW - Chrome
* 5. NEW, Spec - Opera 12.1, Firefox 22+
*/
/*
 * 1. OLD - iOS 6-, Android, Safari 3.1-6
 * 2. OLD - Firefox 21-
 * 3. Chrome
 * 4. IE 10
 */
/*
 * 1. OLD - iOS 6-, Safari 3.1-6
 * 2. OLD - Firefox 21-
 *    Default is 1, so we add 1; see:
 *    https://developer.mozilla.org/en-US/docs/Web/CSS/-moz-box-ordinal-group
 * 3. TWEENER - IE 10
 * 4. NEW - Chrome
 * 5. NEW, Spec - Opera 12.1, Firefox 22+
 */
/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
/**
 * Arrange utility for laying out elements side by side.
 * Elements can either be only wide enough to contain its content
 * or they can take up the remaining space in the row.
 */
.arrange {
  display: table;
  min-width: 100%;
  table-layout: auto; }
  .arrange.hidden {
    display: none; }

.arrange_unit {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  display: table-cell;
  vertical-align: top; }

.arrange_unit--fill {
  width: 100%; }

/** Vertical alignment modifiers */
.arrange--middle > .arrange_unit {
  vertical-align: middle; }

.arrange--baseline > .arrange_unit {
  vertical-align: baseline; }

.arrange--bottom > .arrange_unit {
  vertical-align: bottom; }

/** Gutter modifiers */
.arrange--6 {
  margin-left: -3px;
  margin-right: -3px; }
  .arrange--6 > .arrange_unit {
    padding-left: 3px;
    padding-right: 3px; }
  @media only screen and (max-width: 989px) {
    .responsive .arrange--6.arrange--stack > .arrange_unit + .arrange_unit {
      margin-top: 6px; } }

@media only screen and (max-width: 989px) {
  .responsive .arrange--stack > .arrange_unit--stack-6 {
    margin-top: 6px !important; } }

.arrange--12 {
  margin-left: -6px;
  margin-right: -6px; }
  .arrange--12 > .arrange_unit {
    padding-left: 6px;
    padding-right: 6px; }
  @media only screen and (max-width: 989px) {
    .responsive .arrange--12.arrange--stack > .arrange_unit + .arrange_unit {
      margin-top: 12px; } }

@media only screen and (max-width: 989px) {
  .responsive .arrange--stack > .arrange_unit--stack-12 {
    margin-top: 12px !important; } }

.arrange--18 {
  margin-left: -9px;
  margin-right: -9px; }
  .arrange--18 > .arrange_unit {
    padding-left: 9px;
    padding-right: 9px; }
  @media only screen and (max-width: 989px) {
    .responsive .arrange--18.arrange--stack > .arrange_unit + .arrange_unit {
      margin-top: 18px; } }

@media only screen and (max-width: 989px) {
  .responsive .arrange--stack > .arrange_unit--stack-18 {
    margin-top: 18px !important; } }

.arrange--24 {
  margin-left: -12px;
  margin-right: -12px; }
  .arrange--24 > .arrange_unit {
    padding-left: 12px;
    padding-right: 12px; }
  @media only screen and (max-width: 989px) {
    .responsive .arrange--24.arrange--stack > .arrange_unit + .arrange_unit {
      margin-top: 24px; } }

@media only screen and (max-width: 989px) {
  .responsive .arrange--stack > .arrange_unit--stack-24 {
    margin-top: 24px !important; } }

.arrange--30 {
  margin-left: -15px;
  margin-right: -15px; }
  .arrange--30 > .arrange_unit {
    padding-left: 15px;
    padding-right: 15px; }
  @media only screen and (max-width: 989px) {
    .responsive .arrange--30.arrange--stack > .arrange_unit + .arrange_unit {
      margin-top: 30px; } }

@media only screen and (max-width: 989px) {
  .responsive .arrange--stack > .arrange_unit--stack-30 {
    margin-top: 30px !important; } }

.arrange--36 {
  margin-left: -18px;
  margin-right: -18px; }
  .arrange--36 > .arrange_unit {
    padding-left: 18px;
    padding-right: 18px; }
  @media only screen and (max-width: 989px) {
    .responsive .arrange--36.arrange--stack > .arrange_unit + .arrange_unit {
      margin-top: 36px; } }

@media only screen and (max-width: 989px) {
  .responsive .arrange--stack > .arrange_unit--stack-36 {
    margin-top: 36px !important; } }

.arrange--42 {
  margin-left: -21px;
  margin-right: -21px; }
  .arrange--42 > .arrange_unit {
    padding-left: 21px;
    padding-right: 21px; }
  @media only screen and (max-width: 989px) {
    .responsive .arrange--42.arrange--stack > .arrange_unit + .arrange_unit {
      margin-top: 42px; } }

@media only screen and (max-width: 989px) {
  .responsive .arrange--stack > .arrange_unit--stack-42 {
    margin-top: 42px !important; } }

/**
 * Inline columns modifier.
 *
 * Using inline-block arrange units can wrap.
 * A width has to be set on the unit in order for this modifier to work.
 *
 * 1. Remove inter-cell whitespace that appears between `inline-block` child
 * elements.
 * 2. Reset line-height
 * 3. Ensure default alignment
 * 4. IE<8 inline-block
 * 5. Restore font-size and line-height
 * 6. Add vertical gutter when using the gutter modifiers
 */
.arrange--wrap {
  display: block;
  font-size: 0;
  line-height: 1;
  text-align: left; }
  .arrange--wrap > .arrange_unit {
    display: inline-block;
    *display: inline;
    zoom: 1;
    width: auto;
    font-size: 14px;
    line-height: 1.28571em; }
  .arrange--wrap.arrange--6 {
    margin-top: -6px; }
    .arrange--wrap.arrange--6 > .arrange_unit {
      margin-top: 6px; }
  .arrange--wrap.arrange--12 {
    margin-top: -12px; }
    .arrange--wrap.arrange--12 > .arrange_unit {
      margin-top: 12px; }
  .arrange--wrap.arrange--18 {
    margin-top: -18px; }
    .arrange--wrap.arrange--18 > .arrange_unit {
      margin-top: 18px; }
  .arrange--wrap.arrange--24 {
    margin-top: -24px; }
    .arrange--wrap.arrange--24 > .arrange_unit {
      margin-top: 24px; }
  .arrange--wrap.arrange--30 {
    margin-top: -30px; }
    .arrange--wrap.arrange--30 > .arrange_unit {
      margin-top: 30px; }
  .arrange--wrap.arrange--36 {
    margin-top: -36px; }
    .arrange--wrap.arrange--36 > .arrange_unit {
      margin-top: 36px; }
  .arrange--wrap.arrange--42 {
    margin-top: -42px; }
    .arrange--wrap.arrange--42 > .arrange_unit {
      margin-top: 42px; }

/**
 * Unit size modifiers.
 * Sets the arrange_unit size.
 * Useful when paired up with arrange--wrap.
 *
 * Produces:
 * .arrange--2-units - 50%
 * .arrange--3-units - 33.333333333%
 * .arrange--4-units - 25%
 * .arrange--5-units - 20%
 * .arrange--6-units - 16.666666667%
 * .arrange--N-units - 100% / N
 */
.arrange--2-units > .arrange_unit {
  width: 50%; }
  .ltie8 .arrange--2-units > .arrange_unit {
    width: 46%; }

.arrange--3-units > .arrange_unit {
  width: 33.33333%; }
  .ltie8 .arrange--3-units > .arrange_unit {
    width: 29.33333%; }

.arrange--4-units > .arrange_unit {
  width: 25%; }
  .ltie8 .arrange--4-units > .arrange_unit {
    width: 21%; }

.arrange--5-units > .arrange_unit {
  width: 20%; }
  .ltie8 .arrange--5-units > .arrange_unit {
    width: 16%; }

.arrange--6-units > .arrange_unit {
  width: 16.66667%; }
  .ltie8 .arrange--6-units > .arrange_unit {
    width: 12.66667%; }

/**
 * Reponsive modifier
 *
 * On responsive pages, this modifier will rearrange any contained arrange_units
 * into a vertical stack of full width blocks when in non-desktop views.
 */
@media only screen and (max-width: 989px) {
  .responsive .arrange--stack {
    display: block; }
    .responsive .arrange--stack > .arrange_unit {
      display: block; }
    .responsive .arrange--stack > .arrange_unit + .arrange_unit {
      margin-top: 15px; }
    .responsive .arrange--stack > .nowrap {
      white-space: normal; } }

/**
 * Equal columns modifier
 *
 * This modifier uses flexbox to make gutters work correctly.
 * In order to have equal size layout, we need to set the arrange
 * width to 100% and in this case the left/right negative margin doesn't work.
 * (Extra space on the right is created.)
 *
 * 1. Prevent weird interaction between display-table and flex-box
 */
.arrange--equal {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex; }
  .arrange--equal > .arrange_unit {
    -webkit-box-flex: 1;
    -moz-box-flex: 1;
    -webkit-flex: 1;
    -ms-flex: 1;
    flex: 1;
    display: block; }
  .arrange--equal.arrange--middle {
    -webkit-box-align: center;
    -moz-box-align: center;
    -ms-flex-align: center;
    box-align: center;
    -webkit-align-items: center;
    align-items: center; }
  .arrange--equal.arrange--baseline {
    -webkit-box-align: baseline;
    -moz-box-align: baseline;
    -ms-flex-align: baseline;
    box-align: baseline;
    -webkit-align-items: baseline;
    align-items: baseline; }
  .arrange--equal.arrange--bottom {
    -webkit-box-align: flex-end;
    -moz-box-align: flex-end;
    -ms-flex-align: flex-end;
    box-align: flex-end;
    -webkit-align-items: flex-end;
    align-items: flex-end; }
  .ie .arrange--equal {
    width: 100%;
    table-layout: fixed; }
    .ie .arrange--equal > .arrange_unit {
      width: 1%;
      display: table-cell; }

/** IE7 fallback */
.ltie8 .arrange {
  *zoom: 1; }
.ltie8 .arrange--equal .arrange_unit,
.ltie8 .arrange_unit {
  width: auto;
  overflow: hidden;
  float: left; }

/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * Flexbox Mixins
 * Uses a mix of old and new syntaxes for maximum support.
 * See http://css-tricks.com/using-flexbox/
 *
 * Caution: flexbox implementations are still inconsistent across browsers,
 * so as always it's important to test your code!
 */
/*
* 1. OLD - iOS 6-, Android, Safari 3.1-6
* 2. OLD - Firefox 21-
* 3. TWEENER - IE 10
* 4. NEW - Chrome
* 5. NEW, Spec - Opera 12.1, Firefox 22+
*/
/*
 * 1. OLD - iOS 6-, Android, Safari 3.1-6
 * 2. OLD - Firefox 21-
 * 3. Chrome
 * 4. IE 10
 */
/*
 * 1. OLD - iOS 6-, Safari 3.1-6
 * 2. OLD - Firefox 21-
 *    Default is 1, so we add 1; see:
 *    https://developer.mozilla.org/en-US/docs/Web/CSS/-moz-box-ordinal-group
 * 3. TWEENER - IE 10
 * 4. NEW - Chrome
 * 5. NEW, Spec - Opera 12.1, Firefox 22+
 */
/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
.ybtn {
  cursor: pointer;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: inline-block;
  vertical-align: middle;
  margin: 0;
  padding: 7px 16px;
  border: 1px solid;
  border-color: #cdcdcd;
  border-color: rgba(0, 0, 0, 0.2);
  border-radius: 4px;
  font-size: 14px;
  line-height: 1.28571em;
  font-weight: bold;
  text-align: center;
  color: #333;
  background: #f8f8f8;
  background: -webkit-linear-gradient(white, #eee);
  background: linear-gradient(white, #eee);
  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1), inset 0 -2px 2px rgba(0, 0, 0, 0.05), inset 0 -1px 1px white;
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1), inset 0 -2px 2px rgba(0, 0, 0, 0.05), inset 0 -1px 1px white; }

a.ybtn {
  text-decoration: none !important; }
  a.ybtn:hover, a.ybtn:visited {
    color: #333; }

.ybtn:hover {
  background: #f0f0f0;
  background: -webkit-linear-gradient(#fafafa, #e9e9e9);
  background: linear-gradient(#fafafa, #e9e9e9); }

.ybtn:focus {
  outline: thin dotted;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px; }

.ybtn:active,
.ybtn.active,
.ybtn:disabled,
.ybtn.ybtn-disabled {
  -webkit-box-shadow: none;
  box-shadow: none;
  background: -webkit-linear-gradient(#d9d9d9, #e4e4e4);
  background: linear-gradient(#d9d9d9, #e4e4e4); }

.ybtn:disabled,
.ybtn-disabled {
  opacity: 0.4;
  cursor: default; }

.ltie9 .ybtn-disabled {
  background: #fafafa;
  color: #b3b3b3;
  cursor: default; }

.ybtn + a,
.ybtn + .ybtn-sibling {
  display: inline-block;
  vertical-align: middle;
  margin-left: 12px; }
  .ybtn + a:not(.ybtn),
  .ybtn + .ybtn-sibling:not(.ybtn) {
    margin-top: 9px;
    margin-bottom: 7px;
    font-size: 14px;
    line-height: 1.28571em; }

.ybtn-small {
  padding: 5px 8px;
  font-size: 12px;
  line-height: 1.5em;
  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1); }
  .ybtn-small + a:not(.ybtn), .ybtn-small + .ybtn-sibling:not(.ybtn) {
    margin-top: 5px;
    margin-bottom: 5px;
    font-size: 12px;
    line-height: 1.5em; }

.ybtn-full {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 100%; }
  .ie7 .ybtn-full {
    width: 97%; }
  .ybtn-full.facebook .i-wrap, .ybtn-full.twitter .i-wrap, .ybtn-full.ybtn--google-plus .i-wrap {
    display: block; }

@media only screen and (max-width: 989px) {
  .responsive .ybtn-full-responsive-medium {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    width: 100%; } }

@media only screen and (max-width: 479px) {
  .responsive .ybtn-full-responsive-small {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    width: 100%; } }

@media only screen and (max-width: 479px) {
  .responsive .ybtn-full-responsive-small + a,
  .responsive .ybtn-full-responsive-small + .ybtn-sibling {
    display: block;
    text-align: center;
    margin-left: auto; } }

@media only screen and (max-width: 989px) {
  .responsive .ybtn-full-responsive-medium + a,
  .responsive .ybtn-full-responsive-medium + .ybtn-sibling {
    display: block;
    text-align: center;
    margin-left: auto; } }

.ytype.ybtn-giant {
  padding: 23px;
  font-size: 21px;
  line-height: 1.28571em;
  border-radius: 8px; }
  .ytype.ybtn-giant .info-text {
    font-size: 12px;
    line-height: 1.5em;
    font-weight: normal; }

/** Cross-browser crud */
.ie button.ybtn > span,
.ie input[type=submit].ybtn > span {
  position: relative;
  display: block; }

.ltie8 button.ybtn,
.ltie8 input[type=submit].ybtn {
  display: inline;
  zoom: 1; }

.ltie8 button.ybtn-large,
.ltie8 input[type=submit].ybtn-large {
  padding-top: 3px;
  padding-bottom: 2px; }

.ltie8 .ybtn-primary {
  border: 0 !important; }

/**
 * Custom-themed buttons for special occasions.
 */
.ybtn-primary {
  color: white;
  border-color: #a50508;
  background: #ea050b;
  background-image: -webkit-linear-gradient(#ff2000 2%, #ea050b 10%, #d40d04 100%);
  background-image: linear-gradient(#ff2000 2%, #ea050b 10%, #d40d04 100%);
  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.3);
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.3);
  text-shadow: 0 -1px 0 #760400; }
  .ybtn-primary:hover {
    background: #ff2000;
    background-image: -webkit-linear-gradient(#ff2000 2%, #ea050b 50%, #d40d04 100%);
    background-image: linear-gradient(#ff2000 2%, #ea050b 50%, #d40d04 100%); }
  .ybtn-primary.active, .ybtn-primary:active, .ybtn-primary:disabled, .ybtn-primary.ybtn-disabled {
    background: #d40d04;
    background-image: -webkit-linear-gradient(#d40d04 0%, #ea050b 90%, #ff2000 98%);
    background-image: linear-gradient(#d40d04 0%, #ea050b 90%, #ff2000 98%); }
  .ltie9 .ybtn-primary.ybtn-disabled {
    background: #d40d04;
    color: white; }

a.ybtn-primary:hover, a.ybtn-primary:visited {
  color: white; }

.ybtn-reservations {
  border-color: #6c0900;
  background: #b60d09;
  background: -webkit-linear-gradient(#c41200 10%, #a60e00 100%);
  background: linear-gradient(#c41200 10%, #a60e00 100%);
  text-shadow: 0 -1px 0 #760400; }
  .ybtn-reservations:hover {
    background: #d71b08;
    background: -webkit-linear-gradient(#d71b08 10%, #a60e00 100%);
    background: linear-gradient(#d71b08 10%, #a60e00 100%); }
  .ybtn-reservations:active {
    background: #a60e00;
    background: -webkit-linear-gradient(#a60e00 0%, #c41200 90%);
    background: linear-gradient(#a60e00 0%, #c41200 90%); }

.ybtn-platform {
  border-color: #c77f50;
  background: #df9342;
  background: -webkit-linear-gradient(#e39f59, #de8f2b);
  background: linear-gradient(#e39f59, #de8f2b);
  text-shadow: 0 -1px 0 #b37248; }
  .ybtn-platform:hover {
    background: #eaa157;
    background: -webkit-linear-gradient(#eaa157 20%, #de8f2b);
    background: linear-gradient(#eaa157 20%, #de8f2b); }
  .ybtn-platform:active, .ybtn-platform:disabled, .ybtn-platform.ybtn-disabled {
    background: #de8f2b;
    background: -webkit-linear-gradient(#de8f2b, #e39f59);
    background: linear-gradient(#de8f2b, #e39f59); }

.ybtn-cta {
  border-color: #d2471d;
  background-color: #ef5d10;
  background: -webkit-linear-gradient(#f06000, #ed5a20);
  background: linear-gradient(#f06000, #ed5a20);
  text-shadow: 0 -1px 0 #c77f50; }
  .ybtn-cta:hover {
    background-color: #ed5a20;
    background: -webkit-linear-gradient(#f06000 20%, #ed5a20);
    background: linear-gradient(#f06000 20%, #ed5a20); }
  .ybtn-cta:active {
    background-color: #ed5a20;
    background: -webkit-linear-gradient(#ed5a20, #f06000);
    background: linear-gradient(#ed5a20, #f06000); }

.ybtn-deal,
.ybtn-deal.ybtn-disabled {
  border-color: #4f910d;
  background: #59a30e;
  background: -webkit-linear-gradient(#5eac0f, #559b0d);
  background: linear-gradient(#5eac0f, #559b0d);
  text-shadow: 0 -1px 0 #2f8e2f; }
  .ybtn-deal:hover,
  .ybtn-deal.ybtn-disabled:hover {
    background: #64b214;
    background: -webkit-linear-gradient(#64b214, #559b0d);
    background: linear-gradient(#64b214, #559b0d); }
  .ybtn-deal:active,
  .ybtn-deal.ybtn-disabled:active {
    background: #559b0d;
    background: -webkit-linear-gradient(#559b0d, #5eac0f);
    background: linear-gradient(#559b0d, #5eac0f); }

.ybtn.twitter {
  text-shadow: 0 -1px 0 #0070a5;
  border-color: #008fd1;
  background: #00aced;
  background: -webkit-linear-gradient(#00aced, #0091d5);
  background: linear-gradient(#00aced, #0091d5); }
  .ybtn.twitter:hover {
    background: #00b3f6;
    background: -webkit-linear-gradient(#00b3f6, #009ce4);
    background: linear-gradient(#00b3f6, #009ce4); }
  .ybtn.twitter:active {
    background: #009ce4;
    background: -webkit-linear-gradient(#009ce4, #00b3f6);
    background: linear-gradient(#009ce4, #00b3f6); }

.ybtn.facebook {
  text-shadow: 0 -1px 0 #364e8f;
  border-color: #3c4d82;
  background: #4a64ab;
  background: -webkit-linear-gradient(#4a64ab, #3e5697);
  background: linear-gradient(#4a64ab, #3e5697); }
  .ybtn.facebook:hover {
    background: #4b69ba;
    background: -webkit-linear-gradient(#4b69ba, #3b57a3);
    background: linear-gradient(#4b69ba, #3b57a3); }
  .ybtn.facebook:active {
    background: #3b57a3;
    background: -webkit-linear-gradient(#3b57a3, #4b69ba);
    background: linear-gradient(#3b57a3, #4b69ba); }

.ybtn--google-plus {
  text-shadow: 0 -1px #b43d2f;
  border-color: #bc3f30;
  background: #e75a48;
  background: -webkit-linear-gradient(#e75a48, #d53a27);
  background: linear-gradient(#e75a48, #d53a27); }
  .ybtn--google-plus:hover {
    background: #f46654;
    background: -webkit-linear-gradient(#f46654, #f34631);
    background: linear-gradient(#f46654, #f34631); }
  .ybtn--google-plus:active {
    background: #d53a27;
    background: -webkit-linear-gradient(#d53a27, #e75a48);
    background: linear-gradient(#d53a27, #e75a48); }

/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
/**
 * Default island
 */
.island {
  padding: 11px;
  background: #f5f5f1;
  border: 1px solid #ccccc8;
  border-radius: 4px; }
  .island.island-light {
    background: none;
    border-color: #e5e5e1; }
  .island.island-blue {
    border-color: #cbd6e7;
    background: #f0f3f8; }
  .island.island-city-scape {
    background-image: image-url("yelp_styleguide/assets/img/structural/city-scape-bg-big.png");
    background-repeat: no-repeat;
    background-position: center bottom; }

/**
 * A set of stacked islands
 */
.island-stack {
  padding: 0; }
  .island-stack > .island-item {
    padding: 14px 11px 11px;
    border-top: 1px solid #ccccc8; }
    .island-stack > .island-item:first-child {
      border-top: none; }
  .island-stack.island-light > .island-item {
    border-color: #e5e5e1; }

/**
 * Add media island
 *
 * This component is used as a call to action for users to upload
 * media (photos/videos). It consists of a button and a piece of text.
 */
.add-media-island {
  -webkit-box-shadow: inset 0 5px 8px -1px rgba(0, 0, 0, 0.1), 0 3px 3px -2px rgba(0, 0, 0, 0.15);
  box-shadow: inset 0 5px 8px -1px rgba(0, 0, 0, 0.1), 0 3px 3px -2px rgba(0, 0, 0, 0.15);
  min-height: 200px; }

.add-media-island-content {
  text-align: center;
  padding-top: 60px; }

.add-media-island-text {
  margin: 12px auto 0;
  font-size: 12px;
  line-height: 1.5em;
  width: 85%; }
  .add-media-island-full .add-media-island-text {
    margin: 18px auto 0;
    font-size: 14px;
    line-height: 1.28571em;
    width: 65%; }

/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * Mixin to detect devices that support higher resolution images.
 *
 * Example usage:
 * .logo {
 *     background-image: image-url('logo.png');
 *     background-size: 20px;
 *
 *     @include pixel-ratio-2x {
 *         background-image: image-url('logo@2x.png');
 *     }
 * }
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
/**
 * Basic form styles (updated with biz details redesign 2013)
 * 1. hardcoded to match the ybtn one. We will refactor yform at some point and normalize these values
 */
.yform {
  margin-bottom: 18px;
  /*
   * IE9 doesn't handle line-height values properly on text inputs that are selected with [type=x]
   * 1. Fixes it
   * 2. Compensates the lost line-height
   */
  /*
   * 1. Position default browser arrows outside.
   */
  /**
   * Form notices (errors/warning/success) states
   *
   * 1. Right padding added to leave room for notice icon
   * 2. Negative right margin equal to the padding to pull the icon
   *    to the tail end of the input field
   *
   * TODO(msamuels|2013-03-05): Clean up this selector once old form error styles are eliminated.
   */
  /*
   * Error & warning icons for pseudo-inputs are positioned
   * absolutely within the pseudo-input wrapping div
   * (where as regular inputs are siblings of error/warning icons)
   */ }
  .yform .form-row {
    *zoom: 1;
    margin: 0 -15px; }
    .yform .form-row:before, .yform .form-row:after {
      content: " ";
      display: table; }
    .yform .form-row:after {
      clear: both; }
  .yform [type="text"],
  .yform [type="password"],
  .yform [type="email"],
  .yform [type="url"],
  .yform textarea,
  .yform select,
  .yform .pseudo-input {
    display: block;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    width: 100%;
    *width: 90%;
    margin: 0 0 18px;
    padding: 5px;
    background: #fafafa;
    background: rgba(250, 250, 249, 0.9);
    border: 1px solid #bbb;
    border-radius: 2px;
    -webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.15);
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.15);
    font-size: 14px;
    line-height: 1.28571em; }
    .yform [type="text"]:disabled,
    .yform [type="password"]:disabled,
    .yform [type="email"]:disabled,
    .yform [type="url"]:disabled,
    .yform textarea:disabled,
    .yform select:disabled,
    .yform .pseudo-input:disabled {
      background: #e5e5e5;
      border-color: #bbb;
      -webkit-box-shadow: inset 0 2px 2px rgba(0, 0, 0, 0.05);
      box-shadow: inset 0 2px 2px rgba(0, 0, 0, 0.05);
      -webkit-text-fill-color: #999; }
      .yform [type="text"]:disabled::-webkit-input-placeholder, .yform [type="text"]:disabled::-moz-placeholder, .yform [type="text"]:disabled:-moz-placeholder, .yform [type="text"]:disabled:-ms-input-placeholder,
      .yform [type="password"]:disabled::-webkit-input-placeholder,
      .yform [type="password"]:disabled::-moz-placeholder,
      .yform [type="password"]:disabled:-moz-placeholder,
      .yform [type="password"]:disabled:-ms-input-placeholder,
      .yform [type="email"]:disabled::-webkit-input-placeholder,
      .yform [type="email"]:disabled::-moz-placeholder,
      .yform [type="email"]:disabled:-moz-placeholder,
      .yform [type="email"]:disabled:-ms-input-placeholder,
      .yform [type="url"]:disabled::-webkit-input-placeholder,
      .yform [type="url"]:disabled::-moz-placeholder,
      .yform [type="url"]:disabled:-moz-placeholder,
      .yform [type="url"]:disabled:-ms-input-placeholder,
      .yform textarea:disabled::-webkit-input-placeholder,
      .yform textarea:disabled::-moz-placeholder,
      .yform textarea:disabled:-moz-placeholder,
      .yform textarea:disabled:-ms-input-placeholder,
      .yform select:disabled::-webkit-input-placeholder,
      .yform select:disabled::-moz-placeholder,
      .yform select:disabled:-moz-placeholder,
      .yform select:disabled:-ms-input-placeholder,
      .yform .pseudo-input:disabled::-webkit-input-placeholder,
      .yform .pseudo-input:disabled::-moz-placeholder,
      .yform .pseudo-input:disabled:-moz-placeholder,
      .yform .pseudo-input:disabled:-ms-input-placeholder {
        color: #999; }
    .yform [type="text"].hidden,
    .yform [type="password"].hidden,
    .yform [type="email"].hidden,
    .yform [type="url"].hidden,
    .yform textarea.hidden,
    .yform select.hidden,
    .yform .pseudo-input.hidden {
      display: none; }
    .yform [type="text"].inline-block,
    .yform [type="password"].inline-block,
    .yform [type="email"].inline-block,
    .yform [type="url"].inline-block,
    .yform textarea.inline-block,
    .yform select.inline-block,
    .yform .pseudo-input.inline-block {
      display: inline-block; }
    @media only screen and (max-width: 989px) {
      .responsive .yform [type="text"], .responsive
      .yform [type="password"], .responsive
      .yform [type="email"], .responsive
      .yform [type="url"], .responsive
      .yform textarea, .responsive
      .yform select, .responsive
      .yform .pseudo-input {
        font-size: 16px;
        line-height: 1.3125em; } }
  .ie9 .yform [type="text"], .ie9 .yform [type="password"], .ie9 .yform [type="email"], .ie9 .yform [type="url"] {
    line-height: 1;
    padding-top: 7px;
    padding-bottom: 3px; }
  .yform .pseudo-input {
    cursor: text;
    position: relative;
    overflow: hidden; }
    .yform .pseudo-input .yselect {
      position: static; }
  .yform textarea {
    height: 78px;
    resize: vertical; }
  .yform .noresize {
    resize: none; }
  .yform .vert-resize {
    resize: vertical; }
  .yform select {
    height: 30px;
    line-height: 30px; }
  .yform [type="text"]:focus,
  .yform [type="password"]:focus,
  .yform [type="email"]:focus,
  .yform [type="url"]:focus,
  .yform textarea:focus,
  .yform .pseudo-input.focused,
  .yform .pseudo-input.is-focused {
    background: white;
    border-color: #999995;
    -webkit-box-shadow: inset 0 2px 2px rgba(0, 0, 0, 0.15), 0 0 6px rgba(0, 126, 255, 0.5);
    box-shadow: inset 0 2px 2px rgba(0, 0, 0, 0.15), 0 0 6px rgba(0, 126, 255, 0.5);
    outline: none;
    color: #333; }
  .yform .pseudo-input textarea,
  .yform .pseudo-input textarea:focus,
  .yform .pseudo-input.focused textarea,
  .yform .pseudo-input input,
  .yform .pseudo-input input:focus,
  .yform .pseudo-input.focused input {
    margin: 0;
    border: 0;
    outline: 0;
    -webkit-box-shadow: none;
    box-shadow: none;
    background: none;
    padding: 2px;
    display: inline-block;
    vertical-align: middle; }
  .yform .pseudo-input select {
    cursor: pointer;
    position: absolute;
    top: 0;
    left: 0;
    width: 120%;
    height: 100%;
    background: transparent;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    margin: 0;
    padding: 5px 5px 5px 30px;
    line-height: 1;
    border: none;
    outline: none;
    -webkit-box-shadow: none;
    box-shadow: none; }
  .yform .pseudo-input_text {
    float: left;
    margin-right: 5px;
    font-weight: bold;
    color: #333;
    cursor: default;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none; }
  .yform .pseudo-input_text--right {
    float: right;
    margin-right: 0;
    margin-left: 5px; }
  .yform .pseudo-input_field-holder {
    display: block;
    overflow: hidden; }
  .yform .pseudo-input_field {
    width: 100%;
    vertical-align: baseline !important;
    padding: 0 !important; }
  .yform label,
  .yform legend {
    display: inline-block;
    font-weight: bold;
    margin: 0 0 6px; }
  .yform [type="checkbox"] {
    margin: 0.2em 1px 0; }
  .yform [type="radio"] {
    margin: 0.15em 1px 0; }
  .yform fieldset {
    margin-bottom: 18px;
    /**
     * Radios and checkboxes in <= IE10 need some help with positioning.
     * 1. Targets < IE10
     * 2. Targets >= IE10
     * 3. Targets >= IE11, back to normal
     *
     * Styles for 1. and 2. are duplicated because it doesn't work if you
     * put any other selectors in the browserhack for >= IE10
     */ }
    .yform fieldset label {
      display: block; }
      .yform fieldset label span {
        font-weight: normal; }
    .yform fieldset .radio-check {
      padding-left: 1.3em;
      position: relative; }
      .yform fieldset .radio-check input {
        position: absolute;
        left: 0; }
      .ie .yform fieldset .radio-check input {
        margin: 0px 1px 0;
        left: -3px; }
      .ie7 .yform fieldset .radio-check input {
        margin: -3px 1px 0; }
      .yform fieldset .radio-check _:-ms-input-placeholder, :root .yform fieldset .radio-check input {
        margin: 0px 1px 0;
        left: -3px; }
      .yform fieldset .radio-check _:-ms-fullscreen [type="checkbox"],
      .yform fieldset .radio-check _:-ms-fullscreen [type="radio"], :root .yform fieldset .radio-check [type="checkbox"],
      :root .yform fieldset .radio-check [type="radio"] {
        left: 0; }
      .yform fieldset .radio-check _:-ms-fullscreen [type="checkbox"], :root .yform fieldset .radio-check [type="checkbox"] {
        margin: 0.2em 1px 0; }
      .yform fieldset .radio-check _:-ms-fullscreen [type="radio"], :root .yform fieldset .radio-check [type="radio"] {
        margin: 0.15em 1px 0; }
  .yform .inline-fields input,
  .yform .inline-fields select,
  .yform .inline-fields textarea,
  .yform .inline-fields label {
    display: inline-block;
    width: auto; }
  .yform .inline-fields label {
    margin-right: 12px; }
  .yform .input-with-dropper input {
    padding-right: 21px; }
  .yform [type="file"] {
    display: block;
    margin: 6px 0 18px; }
  .yform .help-block,
  .yform .help-inline {
    color: #999;
    font-size: 12px;
    line-height: 1.5em;
    font-weight: normal; }
  .yform .help-block {
    display: block; }
  .yform label + .help-block {
    margin: -6px 0 3px; }
  .yform .transliterate-button {
    margin: -12px 0 18px;
    display: block; }
  .yform [type="email"],
  .yform [type="password"],
  .yform [type="search"],
  .yform [type="text"],
  .yform [type="url"],
  .yform .pseudo-input,
  .yform textarea {
    /*
     * Success/warning/error state inputs use right padding to leave
     *
     */ }
    .yform [type="email"].input-success, .yform [type="email"].input-warning, .yform [type="email"].input-error, .yform [type="email"].error-input,
    .yform [type="password"].input-success,
    .yform [type="password"].input-warning,
    .yform [type="password"].input-error,
    .yform [type="password"].error-input,
    .yform [type="search"].input-success,
    .yform [type="search"].input-warning,
    .yform [type="search"].input-error,
    .yform [type="search"].error-input,
    .yform [type="text"].input-success,
    .yform [type="text"].input-warning,
    .yform [type="text"].input-error,
    .yform [type="text"].error-input,
    .yform [type="url"].input-success,
    .yform [type="url"].input-warning,
    .yform [type="url"].input-error,
    .yform [type="url"].error-input,
    .yform .pseudo-input.input-success,
    .yform .pseudo-input.input-warning,
    .yform .pseudo-input.input-error,
    .yform .pseudo-input.error-input,
    .yform textarea.input-success,
    .yform textarea.input-warning,
    .yform textarea.input-error,
    .yform textarea.error-input {
      display: -moz-inline-stack;
      display: inline-block;
      padding-right: 24px; }
    .yform [type="email"].input-success,
    .yform [type="password"].input-success,
    .yform [type="search"].input-success,
    .yform [type="text"].input-success,
    .yform [type="url"].input-success,
    .yform .pseudo-input.input-success,
    .yform textarea.input-success {
      margin-right: -21px;
      background: #f5f5f1; }
    .yform [type="email"].input-warning,
    .yform [type="password"].input-warning,
    .yform [type="search"].input-warning,
    .yform [type="text"].input-warning,
    .yform [type="url"].input-warning,
    .yform .pseudo-input.input-warning,
    .yform textarea.input-warning {
      margin-right: -27px;
      padding-right: 27px;
      border: 1px solid #f39c11; }
    .yform [type="email"].input-error, .yform [type="email"].error-input,
    .yform [type="password"].input-error,
    .yform [type="password"].error-input,
    .yform [type="search"].input-error,
    .yform [type="search"].error-input,
    .yform [type="text"].input-error,
    .yform [type="text"].error-input,
    .yform [type="url"].input-error,
    .yform [type="url"].error-input,
    .yform .pseudo-input.input-error,
    .yform .pseudo-input.error-input,
    .yform textarea.input-error,
    .yform textarea.error-input {
      margin-right: -21px;
      border: 1px solid #c41200;
      color: #c41200; }
      .yform [type="email"].input-error:focus,
      .yform [type="email"].input-error .is-focused, .yform [type="email"].error-input:focus,
      .yform [type="email"].error-input .is-focused,
      .yform [type="password"].input-error:focus,
      .yform [type="password"].input-error .is-focused,
      .yform [type="password"].error-input:focus,
      .yform [type="password"].error-input .is-focused,
      .yform [type="search"].input-error:focus,
      .yform [type="search"].input-error .is-focused,
      .yform [type="search"].error-input:focus,
      .yform [type="search"].error-input .is-focused,
      .yform [type="text"].input-error:focus,
      .yform [type="text"].input-error .is-focused,
      .yform [type="text"].error-input:focus,
      .yform [type="text"].error-input .is-focused,
      .yform [type="url"].input-error:focus,
      .yform [type="url"].input-error .is-focused,
      .yform [type="url"].error-input:focus,
      .yform [type="url"].error-input .is-focused,
      .yform .pseudo-input.input-error:focus,
      .yform .pseudo-input.input-error .is-focused,
      .yform .pseudo-input.error-input:focus,
      .yform .pseudo-input.error-input .is-focused,
      .yform textarea.input-error:focus,
      .yform textarea.input-error .is-focused,
      .yform textarea.error-input:focus,
      .yform textarea.error-input .is-focused {
        color: #333; }
  .yform .i-18x18_notification_warning-common_sprite {
    margin-top: 6px; }
  .yform .text-success {
    color: #2f8e2f; }
  .yform .text-error {
    color: #c41200; }
  .yform .text-warning {
    color: #ce882c; }
  .yform .text-error-inline,
  .yform .validator-feedback--inline {
    margin: -12px 0 18px; }
  .yform .pseudo-input > .i {
    position: absolute; }
  .yform .pseudo-input.input-error > .i {
    top: 9px;
    right: 8px; }
  .yform .pseudo-input.input-warning > .i {
    top: 5px;
    right: 5px;
    margin: 0; }

.yselect {
  position: relative;
  box-shadow: none;
  margin: 0 0 18px;
  /*
   * 1. Padding needed to avoid text overflow on arrow icon
   * 2. Reset padding to normal for native select in ie8 and 9
   */
  /*
   * 1. OPERA - Pre-Blink nix the custom arrow, go with a native select
   *    button to keep it simple. Targeted via this hack
   *    http://browserhacks.com/#hack-a3f166304aafed524566bc6814e1d5c7
   */
  /*
   * 1. IE 10/11+ - This hides native dropdown button arrow so it will
   *    have the custom appearance, IE 9 and earlier get a native select.
   *    Targeting media query hack via http://browserhacks.com/#hack-28f493d247a12ab654f6c3637f6978d5
   *    Looking for better ways to achieve this targeting
   *
   * 2. Removes the odd blue bg color behind the text in the select button
   *    in IE 10/11 via
   *    http://stackoverflow.com/questions/17553300/change-ie-background-color-on-unopened-focused-select-box
   */
  /*
   * 1. Firefox focus has odd artifacts around the text, this kills that. See
   *    https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-focusring
   */ }
  .yselect select {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    line-height: inherit;
    padding-right: 28px;
    margin: 0;
    box-shadow: none; }
    .yselect select:focus {
      background-color: white;
      color: inherit; }
    .ie .yselect select {
      padding-right: 5px; }
  .yselect x:-o-prefocus, .yselect .yselect_arrow {
    display: none; }
  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
    .yselect select::-ms-expand {
      display: none; }
    .yselect select:focus::-ms-value {
      background: white;
      color: inherit; } }
  .yselect select:-moz-focusring {
    color: transparent;
    text-shadow: 0 0 0 #000; }

/*
 * 1. This hack makes the select behind the arrow clickable in some browsers
 * 2. IE9 and below don't support select styling
 */
.yselect_arrow {
  position: absolute;
  right: 6px;
  top: 10px;
  pointer-events: none; }
  .ie .yselect_arrow {
    display: none; }

/** Firefox Select Input Browser Hacks */
/*
 * 1. Sass compiles the rules nested in this into invalid css if it's nested
 *    inside another rule which is why it's not with the rest of the yselect
 *    styles. See https://pb.yelpcorp.com/136306 for an example.
 *
 * 2. FIREFOX won't let us hide the native select arrow, so we have to make
 *    wrapper wider than needed and clip native arrow via overflow. The
 *    percentage width is a fallback since FF 4+ supports calc() so we can
 *    just add a fixed amount of extra width to push the native arrow out of
 *    view. We're applying this hack across all FF versions because all the
 *    previous hacks were too fragile and complex. You might want to consider
 *    not using this hack and using the native select arrow in FF. Note this
 *    makes the menus wider than the select button because they display at the
 *    specified width and aren't clipped. Targeting hack via
 *    http://browserhacks.com/#hack-758bff81c5c32351b02e10480b5ed48e
 *
 * 3. Fix found at https://gist.github.com/joaocunha/6273016#tldr-or-the-fix
 *    that works in FF < 30
 *
 */
@-moz-document url-prefix() {
  .yselect {
    overflow: hidden;
    border-right: 1px solid #bbb;
    border-radius: 2px; }
    .yselect select {
      width: 120%;
      width: -moz-calc(100% + 3em);
      width: calc(100% + em);
      padding-right: 5em;
      text-indent: 0.01px;
      text-overflow: ''; } }
/**
 * Targeting Firefox >= 30 at http://browserhacks.com/#hack-cfd4c21603b122acfda8e81f41cdb320
 * in order to replace the fix that breaks at FF >= 30
 */
@supports (-moz-appearance: meterbar) and (background-blend-mode: difference, normal) {
  .yselect select {
    text-indent: 0;
    text-overflow: clip; } }
.yform-input-field-wrap {
  display: table-cell;
  width: 100%;
  padding-right: 5px; }

/** Inline yform */
.yform-inline {
  display: table;
  width: 100%; }
  .yform-inline [type="text"] {
    display: inline;
    margin: 0; }
  .yform-inline .ybtn {
    display: table-cell;
    position: relative;
    top: -1px;
    white-space: nowrap; }
    .yform-inline .ybtn .i {
      margin-bottom: -5px; }
    .ie8 .yform-inline .ybtn, .ie9 .yform-inline .ybtn {
      top: -3px; }

/*
* Applied to a yform to make it smaller (like the search forms)
* 1. makes input height equal to button height on IE
*/
.yform--small [type="text"] {
  font-size: 12px;
  line-height: 1.5em;
  padding: 4px 5px 3px;
  height: 27px; }
.yform--small .ybtn {
  font-size: 12px;
  line-height: 1.5em;
  padding: 4px 5px 3px; }

/**
 * Continuous inline yform -- temporary patch for platform team
 * TODO(msamuels|2015-03-20): Make this continuous input + button
 * the standard inline search form
 */
.yform--continuous [type="text"],
.yform--continuous .pseudo-input {
  margin: 0;
  line-height: 18px; }
.yform--continuous .ybtn {
  border-radius: 0 2px 2px 0;
  margin-left: -1px;
  -webkit-box-shadow: none;
  box-shadow: none; }
  .yform--continuous .ybtn .i {
    display: block; }

/** Inline search form */
.yform-search [type="text"] {
  font-size: 12px;
  padding: 4px 5px 3px; }
  .ie9 .yform-search [type="text"] {
    padding: 4px 5px 3px; }

.yform-search-button {
  padding: 2px 5px; }
  .yform-search-button .i {
    margin-bottom: -5px; }
  .ie8 .yform-search-button, .ie9 .yform-search-button {
    top: 0; }
  .ie9 .yform-search-button {
    line-height: 1.4em; }
  .ltie8 .yform-search-button {
    margin-top: 1px;
    padding: 2px 6px 6px; }

/**
 * Horizontal yform
 *
 * 1. Top offset based on label height and its bottom margin of 6px
 *    so the button is vertically centered with the inputs
 * TODO (CON-2338|thomasd): Remove this pattern and replace with _business_search_form.scss markup
 */
.yform-horizontal {
  *zoom: 1; }
  .yform-horizontal:before, .yform-horizontal:after {
    content: " ";
    display: table; }
  .yform-horizontal:after {
    clear: both; }
  .yform-horizontal .yform-group {
    float: left;
    margin-right: 12px; }
    .yform-horizontal .yform-group + .ytype.ybtn-small {
      margin-top: 22px; }
    .yform-horizontal .yform-group + .ytype.ybtn-large {
      margin-top: 20px; }

/** Nested icon labels */
.nested-icon-label {
  position: relative; }
  .nested-icon-label .i {
    position: absolute;
    left: 8px;
    top: 7px; }

.yform .nested-icon-label input,
.yform .nested-icon-label .pseudo-input {
  display: inline-block;
  padding-left: 27px; }

.ltie8 .yform .nested-icon-label input {
  width: 90%; }

/** Placeholder shim*/
.yform .placeholder-sub {
  display: none;
  color: #999;
  font-weight: normal; }
  .ltie9 .yform .placeholder-sub, .ie9 .yform .placeholder-sub {
    display: block; }

/** HR with text */
.hr-line {
  border: none;
  border-top: 1px solid #ccccc8;
  text-align: center;
  margin: 12px 0; }
  .hr-line legend {
    font-size: 1em;
    padding: 0 15px;
    margin: 0 auto;
    color: #555; }

.input-tag {
  padding: 3px 6px;
  border: 1px solid #ccccc8;
  background: #e5e5e1;
  border-radius: 3px;
  -webkit-box-shadow: 0 1px rgba(255, 255, 255, 0.9);
  box-shadow: 0 1px rgba(255, 255, 255, 0.9);
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  font-size: 14px;
  line-height: 1.28571em;
  font-weight: bold;
  color: #555; }
  .input-tag .display-name {
    padding-right: 27px; }
  .input-tag .i {
    cursor: pointer; }

.inline-form-fields {
  display: table;
  width: 100%;
  margin: 0 -3px; }
  .inline-form-fields .field {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    padding: 0 3px; }
  .inline-form-fields .field-minimal {
    display: table-cell;
    width: 20%; }

/**
 * yform-help-block is the text above or below a form field
 *
 * 1. text below a form field
 * 2. text below an inline form field (right now inline input don't have margin bottom)
 * 3. text above the form field (between label and the form field)
 *
 * TODO(ggurgone|2014-16-07): Clean up this margin hell once we switch from margin-bottom to margin-top
 */
.yform-help-block,
.yform-help-inline {
  color: #999;
  font-size: 12px;
  line-height: 1.5em;
  font-weight: normal; }

.yform-help-block {
  margin-top: -6px; }
  .yform-inline .yform-help-block {
    margin-top: 12px; }
  label + .yform-help-block, .yform-help-block label + .yform-help-block {
    margin: -6px 0 3px; }

.yform-help-valid {
  color: #2f8e2f; }

.yform-help-invalid {
  color: #c41200; }

/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
/* LAYOUTS
 * See them in action at: /styleguide
 * An example: #call $h.layout_column column='alpha', id='some-descriptive-id'
 *
 * These layouts are also used for biz purposes.
 */
.layout-block {
  *zoom: 1;
  margin: 0 -15px; }
  .layout-block:before, .layout-block:after {
    content: " ";
    display: table; }
  .layout-block:after {
    clear: both; }

.layout-border .column-alpha {
  border-right: 1px solid #e5e5e1; }
.layout-border .column-beta {
  -webkit-box-shadow: -1px 0 0 #e5e5e1;
  box-shadow: -1px 0 0 #e5e5e1; }

.layout-full .column-alpha {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 100%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 954px; }

.layout-right-rail .column-alpha {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 66.66667%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 624px;
  padding: 0 30px 0 0;
  margin-left: 15px; }
.layout-right-rail .column-beta {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 33.33333%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 294px;
  padding: 0 30px 0 0;
  margin-right: -15px; }

.layout-a .column-alpha {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 66.66667%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 624px; }
.layout-a .column-beta {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 33.33333%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 294px; }

.layout-h .column {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 50%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 459px; }

.layout-j .column {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 33.33333%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 294px; }
.layout-j.layout-border .column-beta {
  border-right: 1px solid #e5e5e1;
  margin-left: 0; }
.layout-j.layout-border .column-gamma {
  -webkit-box-shadow: -1px 0 0 #e5e5e1;
  box-shadow: -1px 0 0 #e5e5e1; }

.layout-n .column-alpha {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 25%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 211px; }
.layout-n .column-beta {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 75%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 706px; }

.layout-p .column-alpha {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 33.33333%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 294px; }
.layout-p .column-beta {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 66.66667%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 624px; }

/* Let's deprecate these layouts */
.layout-g .column-alpha {
  border-left: 1px solid #e5e5e1;
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 50%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 459px; }
.layout-g .column-beta {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 33.33333%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 294px; }
.layout-g .column-gamma {
  -webkit-box-shadow: 1px 0 0 #e5e5e1;
  box-shadow: 1px 0 0 #e5e5e1;
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 16.66667%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 129px; }

.layout-m .column-alpha {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 50%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 459px; }
.layout-m .column-beta {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 33.33333%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 294px; }
.layout-m .column-gamma {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 16.66667%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 129px; }

.layout-o .column-alpha {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 75%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 706px;
  float: right; }
.layout-o .column-beta {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 25%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 211px;
  float: right; }
.layout-o.layout-border .column-alpha {
  border-right: none;
  -webkit-box-shadow: -1px 0 0 #e5e5e1;
  box-shadow: -1px 0 0 #e5e5e1; }
.layout-o.layout-border .column-beta {
  box-shadow: none;
  margin-left: 0;
  border-right: 1px solid #e5e5e1; }

.layout-sub-a .column-sub-alpha {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 66.66667%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 459px;
  border-right: 1px solid #e5e5e1; }
.layout-sub-a .column-sub-beta {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 33.33333%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 211px;
  -webkit-box-shadow: -1px 0 0 #e5e5e1;
  box-shadow: -1px 0 0 #e5e5e1;
  *margin-right: -1px; }

/** Biz only layout, currently used for biz login page */
.layout-x .column-alpha {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 75%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 706px;
  border-right: 1px solid #e5e5e1; }
.layout-x .column-beta {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 25%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 211px;
  -webkit-box-shadow: -1px 0 0 #e5e5e1;
  box-shadow: -1px 0 0 #e5e5e1; }

/** Equal columns hack */
.layout-block.equalize-columns {
  overflow: hidden; }

.layout-block .equal-columns {
  margin-bottom: -2000em;
  padding-bottom: 2000em; }

/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
/** main footer styles */
.main-footer {
  padding: 36px 0 18px;
  font-size: 14px;
  line-height: 1.28571em;
  color: #555;
  /** misc styles */ }
  .main-footer .xref,
  .main-footer .data-provider-attribution {
    color: #999;
    text-align: center; }
  .ywindow-popup .main-footer {
    display: none; }

.main-footer_menu {
  *zoom: 1;
  margin: 0 -15px;
  margin-bottom: 36px; }
  .main-footer_menu:before, .main-footer_menu:after {
    content: " ";
    display: table; }
  .main-footer_menu:after {
    clear: both; }

.main-footer_item {
  float: left;
  padding: 0 15px;
  min-height: 1px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 25%;
  /*
   * IE7 fallback for box-sizing.
   *
   * 1. Remove some pixels to account for the additional box width that borders
   *    cause.
   */
  *width: 211px; }
  @media only screen and (max-width: 989px) {
    .responsive .main-footer_item {
      width: 33.33333%;
      margin-bottom: 15px; }
      .responsive .main-footer_item:nth-child(4) {
        clear: left; } }
  @media only screen and (max-width: 479px) {
    .responsive .main-footer_item {
      width: 50%; }
      .responsive .main-footer_item:nth-child(3) {
        clear: left; }
      .responsive .main-footer_item:nth-child(4) {
        clear: none; } }

.main-footer_item--full {
  width: 100%; }

/* 1. we are not using font-size mixin here
 * because we need to manually adjust the line-height
 * to match the font-size
 */
.main-footer_copyright {
  margin-top: 18px;
  text-align: center;
  font-size: 12px;
  line-height: 1; }

.main-footer_city-landscape-img {
  background: image-url("yelp_styleguide/assets/img/structural/happy_footer.png") no-repeat center bottom;
  display: block;
  margin: 36px auto 0;
  height: 211px; }

/*
 * 1. Bump the logo down 2px to make it aligned against baseline
 */
.main-footer_logo-copyright {
  margin-bottom: -2px; }

.main-footer_logo-copyright,
.main-footer_logo-burst {
  vertical-align: bottom; }

/** footer-menu component */
.footer-menu_header,
.ytype h3.footer-menu_header {
  margin-bottom: 12px; }

.footer-menu_item {
  margin-bottom: 6px; }

.footer-menu_section {
  margin-bottom: 24px; }

/** Inline footer-menu */
.footer-menu--inline {
  font-size: 13px;
  line-height: 1.38462em;
  text-align: center; }
  .footer-menu--inline .footer-menu_header {
    font-size: 13px;
    line-height: 1.38462em;
    margin-left: 3px; }
    @media only screen and (max-width: 989px) {
      .responsive .footer-menu--inline .footer-menu_header {
        display: block;
        margin-bottom: 6px; } }
    @media only screen and (max-width: 479px) {
      .responsive .footer-menu--inline .footer-menu_header {
        margin-bottom: 12px; } }
  .footer-menu--inline .footer-menu_list {
    display: inline; }
  .footer-menu--inline .footer-menu_item {
    display: inline;
    padding: 0 3px;
    white-space: nowrap; }
    .footer-menu--inline .footer-menu_item.is-highlighted {
      font-weight: bold; }
  .footer-menu--inline .footer-menu_header, .ytype .footer-menu--inline h3.footer-menu_header,
  .footer-menu--inline .footer-menu_list,
  .footer-menu--inline .footer-menu_item {
    margin-bottom: 0; }
  .footer-menu--inline.footer-menu--bordered .footer-menu_list {
    font-size: 0; }
  .footer-menu--inline.footer-menu--bordered .footer-menu_item {
    font-size: 13px;
    line-height: 1.38462em; }
  .footer-menu--inline.footer-menu--bordered .footer-menu_item,
  .footer-menu--inline .footer-menu_item--bordered {
    padding: 0; }
    .footer-menu--inline.footer-menu--bordered .footer-menu_item a,
    .footer-menu--inline .footer-menu_item--bordered a {
      border-left: 1px solid #999;
      padding: 0 6px; }
    .footer-menu--inline.footer-menu--bordered .footer-menu_item:first-child a,
    .footer-menu--inline .footer-menu_item--bordered:first-child a {
      border-left: 0 !important; }
    @media only screen and (max-width: 989px) {
      .responsive .footer-menu--inline.footer-menu--bordered .footer-menu_item a, .responsive
      .footer-menu--inline .footer-menu_item--bordered a {
        border-left: 0; } }
  .footer-menu--inline .footer-menu_item--bordered a {
    margin-left: 6px; }
    @media only screen and (max-width: 989px) {
      .responsive .footer-menu--inline .footer-menu_item--bordered a {
        margin-left: auto; } }

/** Footer menu with border top and top/bottom padding*/
.footer-menu--separated {
  padding: 6px 0;
  border-top: 1px solid #e5e5e1; }
  @media only screen and (max-width: 989px) {
    .responsive .footer-menu--separated {
      padding: 12px 0; }
      .responsive .footer-menu--separated .footer-menu_header {
        display: block;
        margin-bottom: 6px; } }

/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * Flexbox Mixins
 * Uses a mix of old and new syntaxes for maximum support.
 * See http://css-tricks.com/using-flexbox/
 *
 * Caution: flexbox implementations are still inconsistent across browsers,
 * so as always it's important to test your code!
 */
/*
* 1. OLD - iOS 6-, Android, Safari 3.1-6
* 2. OLD - Firefox 21-
* 3. TWEENER - IE 10
* 4. NEW - Chrome
* 5. NEW, Spec - Opera 12.1, Firefox 22+
*/
/*
 * 1. OLD - iOS 6-, Android, Safari 3.1-6
 * 2. OLD - Firefox 21-
 * 3. Chrome
 * 4. IE 10
 */
/*
 * 1. OLD - iOS 6-, Safari 3.1-6
 * 2. OLD - Firefox 21-
 *    Default is 1, so we add 1; see:
 *    https://developer.mozilla.org/en-US/docs/Web/CSS/-moz-box-ordinal-group
 * 3. TWEENER - IE 10
 * 4. NEW - Chrome
 * 5. NEW, Spec - Opera 12.1, Firefox 22+
 */
/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
/**
 * Mixin to detect devices that support higher resolution images.
 *
 * Example usage:
 * .logo {
 *     background-image: image-url('logo.png');
 *     background-size: 20px;
 *
 *     @include pixel-ratio-2x {
 *         background-image: image-url('logo@2x.png');
 *     }
 * }
 */
/**
 * Always import this file if you want to use the global $z-global-list
 *
 * If you want to use a custom $z-global-list. Don't import this file.
 * Instead you should define the list in a new _z_conf.scss file
 * and import it along with 'yelp_styleguide/assets/scss/lib/z_function'
 *
 * Please read the docstring from 'yelp_styleguide/assets/scss/lib/z_function'
 * for a detailed description of the tool and learn how to use it.
 *
 *
 * 1. contains the global $z-global-list and settings overrides
 * 2. contains the public z() function
 */
/**
 * This file contains the settings overrides and main $z-global-list definition for Yelp's Styleguide.
 *
 * 1. We start our z-indexes from 1
 * 2. padding between z-indexs
 */
/**
 * $z-global-list is a z-indexes list organized in levels (indexes in the list).
 *
 * This list contains the Styleguide z-indexes.
 * When using the Styleguide in other sites you may want to
 * redefine its z-indexes in a site specific $z-global-list (_z_conf.scss)
 * and override them in a _z_overrides.scss file
 *
 * Please use the "site-" prefix when adding elements to the list:
 * Standard site prefixes are: styleguide-, common-, www-, biz-, m-, admin-
 * Please stick to the order above when defining rules and add an empty line
 * between the elements of different sites
 */
/**
 * z-index (z) function
 *
 * This file contains the z() function and default settings.
 * Please define your global (main) z-index list in a separate Sass file and override the settings there if necessary.
 * Call this file _z_conf.scss
 *
 *
 * How this thing works:
 *
 * Elements that need a z-index are stored in a Sass list that we call z-global-list.
 * z-global-list is a global variable called $z-global-list.
 * You can change this by setting the value of $z-global-list-name to a string (variable name) of your choice.
 * The list looks like the one below:
 *
 * $z-global-list: (
 *   // level 1
 *   (
 *       www-lightbox,
 *       popup,
 *   ),
 *
 *   // level 2
 *   (
 *      site-tooltip,
 *   ),
 *
 *   // level 3
 *   (
 *      www-header,
 *   ),
 *
 *   // level 4
 *   (
 *      othersite-close-btn,
 *      mobilesite-header,
 *      www-thing,
 *      common-element,
 *   )
 * );
 *
 * Each "level" in the list can either be a Sass list (if multiple elements have the same z-index)
 * or a string (one element at level n).
 * We however suggest to don't use mixed lists and enforce List of Lists
 * by enclosing one-element levels in parenthesis and adding a trailing comma. eg. (my-element,)
 *
 * Given a list like this we can use a Sass function to search the list for "site-element-name"
 * and get back the element index in the list. This would be our z-index value.
 *
 * eg.
 *
 * .lightbox {
 *   z-index: z(www-lightbox);
 * }
 *
 * output:
 * .lightbox {
 *   z-index: 1; // level 1
 * }
 *
 */
/** $z-start-offset - shift the initial index */
/**
 * $z-padding - gap between two z-index "levels" (values)
 *
 * $z-padding: 1 !default;
 *
 * Each z-index is multiplied by $z-padding
 * this creates a gap between two z-index levels that
 * we can use in case of emergency to add stuff in between.
 * z-padding can be overriden in your _z_conf.scss
 */
/**
 * $z-global-list-name - the name of the global Sass list of z-indexes
 *
 * A Sass list is like an array (Sass lists indexes start from 1)
 * and it contains element aliases.
 *
 * It is important to define the element aliases in the correct order.
 * Additionally we suggest to prefix the element aliases with the site (or app) prefix.
 * Valid site prefixes are styleguide, common, www, mobile for example.
 * Valid aliases names (examples) are styleguide-popup, www-lightbox, othersite-header.
 *
 * Each list element can either be:
 * - String: if at the given (z-)index we have only one element
 * - List (of strings): if we have multiple elements with the same z-index (in the example above ypop and lightbox)
 * - null
 * Again, elements with the same z-index (in the example above ypop and lightbox)
 * must be contained in a Sass list (comma separated list of strings, wrapped in parenthesis)
 * Levels can be null.
 *
 * IMPORTANT: You should treat each website like a "service" apart and therefore its $z-global-list MUST contain the current website indexes ONLY!
 * When using the "service" in other websites (eg. www, sub/child website etc) you may want to define a site-specific $z-global-list (in a site specific _z_conf.scss)
 * where you place the service-element alias in the desidered place (index in the list) and finally override the element z-index in a _z_overrides.scss file.
 */
/**
 * z - function: consuming the z-index list
 *
 * z($element, $element-padding, $list):
 *
 * Searches the global $list (or $list if provided) for $element
 * and return its index in the list
 *
 * eg.
 * .lightbox {
 *   z-index: z(lightbox);  // z-index: 1;
 * }
 *
 * $element-padding is a number between 0 and $z-padding
 * and can be used to increase the z-index of $element
 *
 * eg.
 * .lightbox {
 *   z-index: z(lightbox, 5);  // z-index: 6;
 * }
 *
 *
 * Reserved names:
 *
 * sandbox:
 * z-indexes are relative to the parent's one.
 * With sandbox you can isolate z-indexes from the rest of the page
 * by setting the container element z-index to `sandbox`.
 *
 * eg.
 * .container { position: relative; z-index: z(sandbox); }  // 0
 * .container_child { position: absolute; z-index: z(element); }
 *
 *
 * z-index-base:
 * Sometimes elements need a simple `z-index: 1` so that the next element in the DOM doesn't overlap.
 * This is usually easy to avoid by switching the element's order in the DOM
 * but not everyone knows that or it is not always possible.
 * Please use `z-index-base` if you need the smallest possible z-index value != 0 (or none) - usually 1.
 *
 * eg. .elem { position: relative; z-index: z(z-index-base); } // 1
 *
 *
 * Custom lists:
 * z-indexes are always relative to the parent element's one.
 * When defining component level z-indexes it may be a good idea to create a "local" z-index list
 * for the component parts.
 *
 * eg:
 * in _z_conf.scss you might have a list where you store the www-modal element:
 *
 * $z-global-list: (
 *   // other levels ... //
 *
 *   // level 5
 *   (
 *     foo-element,
 *     www-modal,
 *   )
 * )
 *
 * and in modal.scss
 *
 * // z includes _z_function.scss and _z_conf.scss
 * @import 'app/assets/scss/lib/z';
 *
 * $modal-z-indexes: (close-btn, prev-btn, next-btn);
 *
 * .modal {
 *   z-index: z(www-modal); // z-index: 5;
 * }
 *
 * // the following z-indexes are relative to the .modal (parent) one
 * .modal-close {
 *   z-index: z(close-btn, $list: $modal-z-indexes); // z-index: 1;
 * }
 *
 * .modal-prev {
 *    z-index: z(prev-btn, $list: $modal-z-indexes); // z-index: 2;
 * }
 *
 * .modal-next {
 *    z-index: z(prev-next, $list: $modal-z-indexes); // z-index: 3;
 * }
 *
 * 1. Always add the z-index-base
 */
/**
 * Main Header
 * 1. border-bottom contributes 1px height to bottom, so the diference between top and bottom is 1px
 */
.main-header {
  position: relative;
  z-index: 5;
  padding: 12px 0 6px;
  border-bottom: 1px solid #853330;
  font-size: 14px;
  line-height: 1.28571em;
  -webkit-box-shadow: 0 0 5px rgba(78, 2, 2, 0.76);
  box-shadow: 0 0 5px rgba(78, 2, 2, 0.76);
  background: #af0606 image-url("yelp_styleguide/assets/img/structural/header_stars.png") no-repeat center;
  background: image-url("yelp_styleguide/assets/img/structural/header_stars.png") no-repeat center, -webkit-linear-gradient(#c41200, #af0606);
  background: image-url("yelp_styleguide/assets/img/structural/header_stars.png") no-repeat center, -moz-linear-gradient(#c41200, #af0606);
  background: image-url("yelp_styleguide/assets/img/structural/header_stars.png") no-repeat center, linear-gradient(#c41200, #af0606); }
  @media only screen and (min-width: 480px) and (max-width: 989px) {
    .responsive .main-header {
      padding: 9px 0 8px; } }
  @media only screen and (max-width: 479px) {
    .responsive .main-header {
      padding: 4px 0 3px; } }
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    .main-header {
      background: #af0606 image-url("yelp_styleguide/assets/img/structural/header_stars@2x.png") no-repeat center;
      background: image-url("yelp_styleguide/assets/img/structural/header_stars@2x.png") no-repeat center, -webkit-linear-gradient(#c41200, #af0606);
      background: image-url("yelp_styleguide/assets/img/structural/header_stars@2x.png") no-repeat center, -moz-linear-gradient(#c41200, #af0606);
      background: image-url("yelp_styleguide/assets/img/structural/header_stars@2x.png") no-repeat center, linear-gradient(#c41200, #af0606);
      background-size: 1380px auto, 100%; } }

/*
 * 1. Override margin-bottom from ytype header
 * 2. In IE7 and below, styling statically positioned logo with negative margins clips the image.
 * The fix is to use position relative.
 */
.main-header_logo,
.ytype .main-header_logo {
  width: 111px;
  height: 58px;
  margin-top: -6px;
  padding: 0;
  margin-bottom: 0;
  background: image-url("yelp_styleguide/assets/img/logos/header_logo.png") no-repeat; }
  .ltie8 .main-header_logo, .ltie8
  .ytype .main-header_logo {
    position: relative; }
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    .main-header_logo,
    .ytype .main-header_logo {
      background-image: image-url("yelp_styleguide/assets/img/logos/header_logo@2x.png");
      background-size: 111px 58px; } }
  @media only screen and (max-width: 479px) {
    .responsive .main-header_logo, .responsive .main-header--slim .main-header_logo, .responsive
    .ytype .main-header_logo, .responsive .main-header--slim
    .ytype .main-header_logo {
      width: 48px;
      height: 30px;
      background: image-url("yelp_styleguide/assets/img/logos/mobile_logo.png") no-repeat;
      background-size: 48px 26px; } }
  @media only screen and (max-width: 479px) and (-webkit-min-device-pixel-ratio: 2), only screen and (max-width: 479px) and (min-resolution: 192dpi) {
    .responsive .main-header_logo, .responsive .main-header--slim .main-header_logo, .responsive
    .ytype .main-header_logo, .responsive .main-header--slim
    .ytype .main-header_logo {
      background-image: image-url("yelp_styleguide/assets/img/logos/mobile_logo@2x.png"); } }

  @media only screen and (min-width: 480px) and (max-width: 989px) {
    .responsive .main-header_logo, .responsive .main-header--slim .main-header_logo, .responsive
    .ytype .main-header_logo, .responsive .main-header--slim
    .ytype .main-header_logo {
      width: 72px;
      height: 42px;
      margin-top: 0;
      background: image-url("yelp_styleguide/assets/img/logos/tablet_logo.png") no-repeat; } }
  @media only screen and (min-width: 480px) and (max-width: 989px) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-width: 480px) and (max-width: 989px) and (min-resolution: 192dpi) {
    .responsive .main-header_logo, .responsive .main-header--slim .main-header_logo, .responsive
    .ytype .main-header_logo, .responsive .main-header--slim
    .ytype .main-header_logo {
      background-image: image-url("yelp_styleguide/assets/img/logos/tablet_logo@2x.png");
      background-size: 72px 38px; } }

  @media only screen and (max-width: 479px) {
    .responsive .main-header_logo, .responsive
    .ytype .main-header_logo {
      margin-top: 0;
      height: 42px;
      background-position: 0 8px; } }
  .main-header_logo a,
  .ytype .main-header_logo a {
    display: block;
    width: 100%;
    height: 100%;
    text-indent: -1000em; }

/*
 * 1. Override margin-bottom from ytype header
 * 2. Doesn't include 1px border-bottom in height calculation
 */
.main-header_title,
.ytype .main-header_title {
  float: left;
  margin-bottom: 0;
  font-size: 20px;
  line-height: 23px;
  font-weight: bold;
  color: white;
  text-shadow: 0 -1px 0 #9b0e00;
  -webkit-font-smoothing: antialiased; }
  @media only screen and (max-width: 989px) {
    .responsive .main-header_title, .responsive
    .ytype .main-header_title {
      font-size: 12px;
      line-height: 1.5em; } }
  @media only screen and (max-width: 479px) {
    .responsive .main-header_title, .responsive
    .ytype .main-header_title {
      max-width: 120px;
      height: 49px;
      line-height: 49px;
      margin: 0; }
      .responsive .main-header_title span, .responsive
      .ytype .main-header_title span {
        line-height: 18px;
        vertical-align: middle;
        display: inline-block; } }

.main-header_search {
  padding-bottom: 5px; }
  .ltie8 .main-header_search input {
    width: 240px; }
  @media only screen and (max-width: 989px) {
    .responsive .main-header_search {
      display: none; } }

@media only screen and (max-width: 479px) {
  .responsive .main-header--slim {
    padding: 0; } }
.main-header--slim .main-header_logo {
  height: 47px;
  width: 90px;
  background: image-url("yelp_styleguide/assets/img/logos/biz_header_logo.png") no-repeat; }
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    .main-header--slim .main-header_logo {
      background-image: image-url("yelp_styleguide/assets/img/logos/biz_header_logo@2x.png");
      background-size: 90px 47px; } }
  @media only screen and (max-width: 479px) {
    .responsive .main-header--slim .main-header_logo {
      margin-top: 0; } }

.main-header--simple {
  padding: 6px 0; }
  @media only screen and (min-width: 480px) and (max-width: 989px) {
    .responsive .main-header--simple {
      padding: 12px 0 5px; } }
  .main-header--simple .main-header_logo {
    float: none;
    margin: 0 auto; }

/* Mixin to style responsive buttons:
 * buttons styles for small screens are slightly different.
 * 1. Should match the icons height
 * 2. A button that gets styled only when activated, hovered and focused
 */
/*
 * 1. Nest buttons in main-header under .main-header so that they have higher specificity than generic buttons
 * like .ybtn and .ybtn-primary. This makes the buttons impervious to issues with import order of scss files containing
 * buttons.
 */
.main-header .main-header_button,
.main-header .main-header_account .user-account_button {
  vertical-align: middle;
  border: 1px solid #7b0000;
  background: #a20000;
  background-image: -webkit-linear-gradient(#be0100 4%, #a20000 5%, #7c0000 100%);
  background-image: linear-gradient(#be0100 4%, #a20000 5%, #7c0000 100%);
  border-radius: 3px;
  -webkit-box-shadow: none;
  box-shadow: none;
  line-height: 18px; }
  .main-header .main-header_button:hover, .main-header .main-header_button:focus,
  .main-header .main-header_account .user-account_button:hover,
  .main-header .main-header_account .user-account_button:focus {
    background: #8f0000;
    background-image: -webkit-linear-gradient(#a00100 4%, #8f0000 5%, #600 100%);
    background-image: linear-gradient(#a00100 4%, #8f0000 5%, #600 100%); }
  .main-header .main-header_button:active, .main-header .main-header_button.drop-menu-highlighted,
  .main-header .main-header_account .user-account_button:active,
  .main-header .main-header_account .user-account_button.drop-menu-highlighted {
    background: #8e0000;
    background-image: -webkit-linear-gradient(#650000 0%, #8e0000 94%, #8f0000 95%);
    background-image: linear-gradient(#650000 0%, #8e0000 94%, #8f0000 95%); }

@media only screen and (max-width: 989px) {
  .responsive .main-header .main-header_button {
    padding: 6px 12px;
    line-height: 28px;
    background: #d11814;
    background-image: -webkit-linear-gradient(#c51513 4%, #d11814 5%, #bd0c13 100%);
    background-image: linear-gradient(#c51513, #d11814 5%, #bd0c13 100%);
    border: 1px solid #910a10; }
    .responsive .main-header .main-header_button:hover, .responsive .main-header .main-header_button:focus {
      background: #a21310;
      background-image: -webkit-linear-gradient(#96100f 4%, #a21310 5%, #8d090e 100%);
      background-image: linear-gradient(#96100f, #a21310 5%, #8d090e 100%); }
    .responsive .main-header .main-header_button:active {
      background: #740d0b;
      background-image: -webkit-linear-gradient(#680b0a 4%, #740d0b 5%, #5d0609 100%);
      background-image: linear-gradient(#680b0a, #740d0b 5%, #5d0609 100%); } }

/*
 * 1. Reverse direction of buttons, so login comes before sign up when horizontally stacked
 * 2. Fallback for reversing direction of buttons for IE9 and below
 * 3. Since .header-nav_item disappears in responsive-small, move second .header_nav_item move all the way right
 */
/*
 * 1. Explicitly set width on .user-account_button because
 * it is being squashed by .arrange_unit--fill from .header-nav.
 * We can't fix this with .nowrap because there is no text that is wrapping.
 * 2. Set auto width, when user account collapses into hamburger.
 * 3. Move dropdown arrow to top of drop-menu by adjusting for vertical padding from drop-menu
 */
.main-header_account {
  float: right; }
  .main-header_account .user-account_button {
    width: 45px; }
    @media only screen and (max-width: 989px) {
      .responsive .main-header_account .user-account_button {
        width: auto; } }
    @media only screen and (min-width: 480px) and (max-width: 989px) {
      .responsive .main-header_account .user-account_button {
        padding: 6px;
        line-height: 28px;
        background: #d11814;
        background-image: -webkit-linear-gradient(#c51513 4%, #d11814 5%, #bd0c13 100%);
        background-image: linear-gradient(#c51513, #d11814 5%, #bd0c13 100%);
        border: 1px solid #910a10; }
        .responsive .main-header_account .user-account_button:hover, .responsive .main-header_account .user-account_button:focus {
          background: #a21310;
          background-image: -webkit-linear-gradient(#96100f 4%, #a21310 5%, #8d090e 100%);
          background-image: linear-gradient(#96100f, #a21310 5%, #8d090e 100%); }
        .responsive .main-header_account .user-account_button:active {
          background: #740d0b;
          background-image: -webkit-linear-gradient(#680b0a 4%, #740d0b 5%, #5d0609 100%);
          background-image: linear-gradient(#680b0a, #740d0b 5%, #5d0609 100%); } }
    @media only screen and (max-width: 479px) {
      .responsive .main-header_account .user-account_button {
        padding: 6px;
        line-height: 28px;
        background: none;
        border: 0; }
        .responsive .main-header_account .user-account_button:hover, .responsive .main-header_account .user-account_button:focus {
          background: #a21310;
          background-image: -webkit-linear-gradient(#96100f 4%, #a21310 5%, #8d090e 100%);
          background-image: linear-gradient(#96100f, #a21310 5%, #8d090e 100%); }
        .responsive .main-header_account .user-account_button:active {
          background: #740d0b;
          background-image: -webkit-linear-gradient(#680b0a 4%, #740d0b 5%, #5d0609 100%);
          background-image: linear-gradient(#680b0a, #740d0b 5%, #5d0609 100%); } }
  .main-header_account .drop-menu-link_open,
  .main-header_account .drop-menu-link_close {
    display: none; }
  @media only screen and (max-width: 989px) {
    .responsive .main-header_account {
      /** open/close button */
      /** restyle the user account dropdown */ }
      .responsive .main-header_account .header-nav {
        display: -webkit-box;
        display: -moz-box;
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
        -webkit-box-direction: reverse;
        -webkit-box-orient: horizontal;
        -webkit-flex-direction: row-reverse;
        -moz-flex-direction: row-reverse;
        -ms-flex-direction: row-reverse;
        flex-direction: row-reverse;
        -webkit-box-align: center;
        -moz-box-align: center;
        -ms-flex-align: center;
        box-align: center;
        -webkit-align-items: center;
        align-items: center; }
        .ie .responsive .main-header_account .header-nav {
          width: 147px; }
          .ie .responsive .main-header_account .header-nav .header-nav_item {
            float: right; }
          .ie .responsive .main-header_account .header-nav .header-nav_item + .header-nav_item {
            float: left;
            margin-right: 0; } }
      @media only screen and (max-width: 989px) and (max-width: 479px) {
        .ie .responsive .main-header_account .header-nav .header-nav_item + .header-nav_item {
          float: right; } }
  @media only screen and (max-width: 989px) {
      .responsive .main-header_account .header-nav_item + .header-nav_item {
        margin-right: 12px; }
      .responsive .main-header_account .drop-menu {
        padding: 3px 12px; }
      .responsive .main-header_account .drop-menu-link_open {
        display: block; }
      .responsive .main-header_account .drop-menu-highlighted .drop-menu-link_open {
        display: none; }
      .responsive .main-header_account .drop-menu-highlighted .drop-menu-link_close {
        display: block; }
      .responsive .main-header_account .drop-menu-arrow {
        top: -3px; }
        .responsive .main-header_account .drop-menu-arrow:after, .responsive .main-header_account .drop-menu-arrow:before {
          right: -2px; }
      .responsive .main-header_account .drop-menu-group {
        margin: 0;
        padding: 0;
        border: 0; }
      .responsive .main-header_account .drop-down-menu-link {
        margin: 0;
        padding: 0;
        border-top: 1px solid #e5e5e1; }
        .responsive .main-header_account .drop-down-menu-link a,
        .responsive .main-header_account .drop-down-menu-link button {
          padding: 9px 0; }
        .responsive .main-header_account .drop-down-menu-link a {
          font-weight: normal; }
      .responsive .main-header_account .drop-menu-group--nav a {
        color: #333; }
        .responsive .main-header_account .drop-menu-group--nav a:focus, .responsive .main-header_account .drop-menu-group--nav a:hover {
          color: #1a1a1a; }
        .responsive .main-header_account .drop-menu-group--nav a:active {
          color: black; }
      .responsive .main-header_account .drop-menu-group:first-child > .drop-down-menu-link:first-child,
      .responsive .main-header_account .drop-menu-group--nav > .drop-down-menu-link:first-child {
        border-top: 0; } }
  @media only screen and (max-width: 479px) {
    .responsive .main-header_account .drop-menu-origin {
      position: static; }
    .responsive .main-header_account .drop-menu {
      top: 100%;
      left: 0;
      margin: 0;
      border-radius: 0; } }

/*
 * 1. If first nav item is hidden, then we must also hide border-top
 * of next sibling. Otherwise we get this: https://yelp-shootie.appspot.com/asu/5438390602301440
 */
@media only screen and (max-width: 989px) {
  .drop-down-menu-link.responsive-visible-large-block:first-child + .drop-down-menu-link {
    border-top: 0 !important; } }

/*
 * 1. Reverse direction of buttons, so login comes before sign up when horizontally stacked
 */
.main-header--slim .main-header_account .header-nav {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  -webkit-box-direction: reverse;
  -webkit-box-orient: horizontal;
  -webkit-flex-direction: row-reverse;
  -moz-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
  -webkit-box-align: center;
  -moz-box-align: center;
  -ms-flex-align: center;
  box-align: center;
  -webkit-align-items: center;
  align-items: center; }
  .ie .main-header--slim .main-header_account .header-nav {
    width: 147px; }
    .ie .main-header--slim .main-header_account .header-nav .header-nav_item {
      float: right; }
    .ie .main-header--slim .main-header_account .header-nav .header-nav_item + .header-nav_item {
      float: left;
      margin-right: 0; }
    @media only screen and (max-width: 479px) {
      .ie .main-header--slim .main-header_account .header-nav .header-nav_item + .header-nav_item {
        float: right; } }
.main-header--slim .main-header_account .header-nav_item + .header-nav_item {
  margin-right: 6px; }
  @media only screen and (max-width: 479px) {
    .responsive .main-header--slim .main-header_account .header-nav_item + .header-nav_item {
      margin-right: 0; } }
  @media only screen and (min-width: 480px) and (max-width: 989px) {
    .responsive .main-header--slim .main-header_account .header-nav_item + .header-nav_item {
      margin-right: 5px; } }

/**
 * Main Search
 */
.main-search {
  margin-bottom: 0; }
  .main-search .arrange_unit {
    width: 50%; }
    .ltie8 .main-search .arrange_unit {
      width: auto; }
  .main-search .main-search_actions {
    width: auto; }

/*
 * 1. Due to yform's crazy selectors specificity we need to use important here
 * TODO(ggurgone#CON-6916|2015-04-09) get rid of !important when we refactor forms
 */
.main-search_pseudo-input {
  margin: 0 !important;
  border: 1px solid #a70000 !important;
  border-radius: 3px !important;
  background: #f6edea !important;
  background: rgba(250, 249, 246, 0.95) !important;
  -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.3) !important;
  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.3) !important; }
  .main-search_pseudo-input.is-focused {
    background: white !important; }
  .ltie8 .main-search_pseudo-input {
    width: auto; }

.main-search_pseudo-input--action {
  position: relative; }
  .main-search_pseudo-input--action .main-search_field-holder {
    padding-right: 24px; }
  .main-search_pseudo-input--action .main-search_picker-arrow {
    cursor: pointer;
    position: absolute;
    top: 0;
    right: 0; }

.main-search_suggestions-field {
  position: relative; }

.main-search_suggestions {
  position: absolute;
  width: 100%;
  top: 100%;
  left: 0; }

.main-search_field:focus {
  outline: 0; }
  .main-search_field:focus::input-placeholder {
    color: white; }
.main-search_field::input-placeholder, .main-search_field:moz-placeholder {
  color: rgba(0, 0, 0, 0.33); }

.main-search_submit {
  padding: 5px 10px 1px;
  line-height: 18px; }

/*
 * 1. Bump .header-nav to make it aligned baseline with the subtitle text
 */
.main-header_nav {
  margin-left: -8px; }
  .main-header--slim .main-header_nav .header-nav {
    margin-top: 4px; }
  .main-header_nav .header-nav_item {
    display: -moz-inline-stack;
    display: inline-block; }
    .ltie8 .main-header_nav .header-nav_item {
      display: inline;
      zoom: 1; }

/**
 * Header nav
 */
.header-nav_link,
.header-nav_text {
  color: #f5f5f1;
  color: rgba(255, 255, 255, 0.95);
  display: block;
  padding: 0 8px;
  font-size: 13px;
  line-height: 1.38462em;
  font-weight: bold;
  line-height: 21px;
  text-shadow: 0 -1px 0 #760400; }

.header-nav_link {
  border-radius: 3px; }
  .header-nav_link:hover, .header-nav_link:focus, .header-nav_link.tabon {
    color: white;
    text-decoration: none;
    background: #7e0801;
    background: rgba(109, 10, 0, 0.5);
    -webkit-box-shadow: inset 0 1px 0 #7b0000, 0 1px 0 #c33f01;
    box-shadow: inset 0 1px 0 #7b0000, 0 1px 0 #c33f01; }

/*
 * 1. On small/mobile screens, all login buttons should be hidden except
 * for ones that appear under .main-header---slim (This is how the login link
 * in the header of www biz for logged out biz owners functions).
 */
.header-nav_link--log-in {
  display: inline-block; }
  @media only screen and (max-width: 479px) {
    .responsive .header-nav_link--log-in {
      display: none; } }
  @media only screen and (max-width: 479px) {
    .responsive .main-header--slim .header-nav_link--log-in {
      display: inline-block; } }

/*
 * 1. Nest buttons in main-header under .main-header so that they have higher specificity than generic buttons
 * like .ybtn and .ybtn-primary. This makes the buttons impervious to issues with import order of scss files containing
 * buttons.
 *
 * 2. Ignore margin-bottom when nav is horizontally stacked
 */
.main-header .header-nav_button--sign-up {
  margin-bottom: 6px;
  padding: 5px 16px; }
.main-header--slim .header-nav_button--sign-up {
  margin-bottom: 0; }
@media only screen and (max-width: 989px) {
  .responsive .header-nav_button--sign-up {
    margin-bottom: 0; } }

/**
 * User account dropdown
 */
.user-account .user-display-name {
  white-space: nowrap; }

.user-account_button {
  margin: 0;
  padding: 0;
  border: 1px solid #7b0000;
  border-radius: 4px;
  -webkit-box-shadow: 0 0 1px rgba(0, 0, 0, 0.3);
  box-shadow: 0 0 1px rgba(0, 0, 0, 0.3); }

.user-account_button-arrow {
  float: right;
  margin: 12px 5px;
  height: 4px; }

.user-account_avatar {
  overflow: hidden;
  float: left;
  width: 28px;
  height: 28px;
  border-right: 1px solid #7b0000;
  border-radius: 2px 0 0 2px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }
  .user-account_avatar img {
    width: 100%;
    height: 100%; }

/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * Styles for creating CSS-only interactions
 *
 * How it works: there's a hidden checkbox or radio input (the handler) that keeps track of the system's state.
 * This checkbox is a sibling of its trigger (a label connected to the checkbox) and its target
 * (the content that we want to change depending on the system's state). We can target any
 * element inside the system and style it based on the :checked status of the handler.
 * No Javascript required.
 */
/**
 * The checkbox that keeps track of state for the system
 */
/**
 * Given a target and an action, apply the given rules to that target
 * when the action applies
 *
 * $target - a selector adjacent to the handler
 * $action - a state of the handler to check against (i.e., checked, focus, hover)
 * inner content - rules to be applied to $target when the handler is on
 */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
/** Bulleted lists */
.bullet-list-square, .bullet-list-round {
  padding: 0;
  margin: 0 0 24px 12px; }
  .ytype .bullet-list-square, .ytype .bullet-list-round {
    margin-left: 14px; }
  .ltie8 .bullet-list-square, .ltie8 .bullet-list-round {
    margin-left: 18px; }
  .bullet-list-square ul, .bullet-list-round ul,
  .bullet-list-square ol,
  .bullet-list-round ol {
    margin-top: 6px;
    margin-bottom: 6px; }
  .bullet-list-square li, .bullet-list-round li {
    margin-bottom: 6px; }
    .bullet-list-square li:before, .bullet-list-round li:before {
      color: #999;
      font-size: 0.9em;
      position: absolute;
      margin-left: -12px;
      margin-top: 1px; }
      .ytype .bullet-list-square li:before, .ytype .bullet-list-round li:before, .alert .bullet-list-square li:before, .alert .bullet-list-round li:before {
        font-size: 1em;
        margin-left: -13px;
        margin-top: 1px; }

.bullet-list-square > li:before {
  content: "\25AA"; }

.bullet-list-round > li:before {
  content: "\2022"; }

.ltie8 .bullet-list-square {
  list-style: square; }
.ltie8 .bullet-list-round {
  list-style: disc; }

/** Alphanumeric lists */
.numeric-list,
.alpha-list {
  list-style-position: outside;
  margin: 0 0 24px 24px; }
  .numeric-list li,
  .alpha-list li {
    margin-bottom: 6px; }

.numeric-list {
  list-style-type: decimal; }

.alpha-list {
  list-style-type: lower-alpha; }

/** Definition lists*/
.short-def-list dl {
  padding-bottom: 6px; }
  .short-def-list dl:last-child {
    padding-bottom: 0; }
.short-def-list dt,
.short-def-list dd {
  display: inline; }
.short-def-list dt {
  margin-right: 0.25em; }
.short-def-list dd {
  font-weight: bold; }

.ltie8 .short-def-list dt,
.ltie8 .short-def-list dd {
  display: block;
  margin-bottom: 6px; }
.ltie8 .short-def-list dt {
  float: left; }

.def-list-dots dl {
  display: table;
  width: 100%;
  margin: 0; }
.def-list-dots dt {
  display: table-cell;
  width: 100%;
  max-width: 0;
  overflow: hidden;
  vertical-align: top; }
  .def-list-dots dt span:after {
    content: " "; }
  .def-list-dots dt:after {
    content: "..................................................................................................................................................................................................................";
    display: inline-block;
    width: 0;
    color: rgba(0, 0, 0, 0.6); }
.def-list-dots .no-def-item dt:after {
  content: ""; }
.def-list-dots dd {
  display: table-cell;
  margin: 0;
  padding-left: 4px;
  vertical-align: bottom;
  white-space: nowrap; }

.ltie8 .def-list-dots dl {
  border-bottom: 1px dotted #ccccc8;
  clear: both; }
  .ltie8 .def-list-dots dl dd,
  .ltie8 .def-list-dots dl dt {
    width: auto; }
  .ltie8 .def-list-dots dl dt {
    float: left; }
  .ltie8 .def-list-dots dl dd {
    float: right; }
  .ltie8 .def-list-dots dl.no-def-item {
    border: none; }

/** yLists */
.ylist > li {
  margin-bottom: 12px; }

.ylist-bordered > li {
  margin: 0;
  padding: 18px 0;
  border-bottom: 1px solid #e5e5e1;
  padding-bottom: 17px; }
.ylist-bordered.ylist-border-top > li:first-child {
  border-top: 1px solid #e5e5e1; }

.ylist--condensed > li {
  margin-bottom: 6px; }

/**
 * Inline layout list
 *
 * 1. Remove inter-cell whitespace that appears between `inline-block` child elements.
 * 2. Reset line-height
 * 3. Ensure default alignment
 * 4. IE<8 inline-block
 * 5. Restore font-size and line-height
 */
.inline-layout {
  margin: -3px;
  display: block;
  font-size: 0;
  line-height: 1;
  text-align: left; }
  .inline-layout > li {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    display: inline-block;
    *display: inline;
    zoom: 1;
    vertical-align: top;
    font-size: 14px;
    line-height: 1.28571em;
    width: 50%;
    padding: 0 3px;
    margin: 3px 0; }
    .ltie8 .inline-layout > li {
      width: 46%;
      padding: 0 2%; }

.inline-layout.up-3 > li {
  width: 33.33333%; }
  .ltie8 .inline-layout.up-3 > li {
    width: 29.33333%; }

.inline-layout.up-4 > li {
  width: 25%; }
  .ltie8 .inline-layout.up-4 > li {
    width: 21%; }

.inline-layout.up-5 > li {
  width: 20%; }
  .ltie8 .inline-layout.up-5 > li {
    width: 16%; }

.inline-layout.up-6 > li {
  width: 16.66667%; }
  .ltie8 .inline-layout.up-6 > li {
    width: 12.66667%; }

@media only screen and (max-width: 989px) {
  .responsive .inline-layout--stack > li {
    float: none;
    width: 100%;
    margin: 6px 0; } }

/** Iconed list */
.iconed-list {
  /*
   * 1. Take up all of the available remaining space (similar to `flex: 1`)
   */ }
  .iconed-list .iconed-list-item {
    display: table;
    width: 100%;
    margin-bottom: 0; }
    .iconed-list .iconed-list-item:last-child .iconed-list-story {
      border-bottom: none; }
  .iconed-list .iconed-list-avatar {
    float: none;
    display: table-cell;
    vertical-align: middle;
    min-width: 34px;
    margin: 0;
    padding-right: 9px;
    text-align: center; }
    .iconed-list .iconed-list-avatar .i {
      display: block;
      margin: 0 auto; }
  .iconed-list .iconed-list-story {
    display: table-cell;
    width: 100%;
    padding: 9px 0;
    border-bottom: 1px solid #e5e5e1;
    padding-bottom: 8px; }
  .ltie8 .iconed-list .iconed-list-avatar {
    float: left;
    width: 34px; }

/**
 * Action link list
 *
 * 1. TODO(msamuels|2015-06-04): Remove when CON-5921 ships in yelp-main
 */
.action-link-list {
  margin-top: 6px;
  font-weight: bold; }
  .action-link-list .iconed-list-avatar {
    min-width: 23px;
    padding-right: 6px; }
  .action-link-list .iconed-list-story {
    padding: 4px 0; }
  .action-link-list .saving-msg {
    display: none;
    margin: 6px; }

.action-link-list--small {
  font-size: 12px;
  line-height: 1.5em; }
  .action-link-list--small li + li .action-link_label {
    border-top: 1px solid #e5e5e1; }

.action-link_icon,
.action-link_label {
  padding-top: 5px;
  padding-bottom: 5px; }
  .action-link-list--small .action-link_icon, .action-link-list--small
  .action-link_label {
    padding-top: 3px;
    padding-bottom: 3px; }

.action-link_icon {
  padding-right: 12px; }

/** Titled navigation list */
.titled-nav-list {
  border: 1px solid #ccccc8;
  border-radius: 5px; }
  .titled-nav-list .titled-nav-title-section {
    padding: 11px; }
    .titled-nav-list .titled-nav-title-section h3 {
      margin: 0;
      color: #333; }
      .titled-nav-list .titled-nav-title-section h3 a {
        color: #333; }
    .titled-nav-list .titled-nav-title-section p {
      margin: 3px 0 0; }
    .titled-nav-list .titled-nav-title-section .yform {
      margin-bottom: 0; }
    .titled-nav-list .titled-nav-title-section .view-more-link {
      float: right;
      margin: 3px 0 0 6px;
      font-size: 12px;
      line-height: 1.5em;
      font-weight: bold; }
  .titled-nav-list .titled-nav {
    border-top: 1px solid #ccccc8;
    background: #f5f5f1;
    border-radius: 0 0 5px 5px; }
  .titled-nav-list .titled-nav li:last-child a {
    border-radius: 0 0 5px 5px; }
  .titled-nav-list .titled-nav a {
    display: block;
    padding: 8px 11px;
    text-decoration: none;
    color: #333;
    /*
     * 1. Make the blue color cover the outer borders (looks better).
     */ }
    .titled-nav-list .titled-nav a:hover, .titled-nav-list .titled-nav a:focus {
      background-color: #e5e5e1; }
    .titled-nav-list .titled-nav a.active {
      background: #3b65a7;
      margin: 0 -1px;
      color: white; }
      .titled-nav-list .titled-nav a.active .subtle-text,
      .titled-nav-list .titled-nav a.active .time-stamp {
        color: white;
        opacity: 0.6; }
      .titled-nav-list .titled-nav a.active + .titled-subnav {
        display: block; }
    .titled-nav-list .titled-nav a.active--with-subnav {
      background: transparent;
      color: inherit; }
  .titled-nav-list .titled-nav li + li a {
    border-top: 1px solid #e5e5e1; }
  .titled-nav-list .titled-nav li.is-opened + li a {
    border-top-color: transparent; }
  .titled-nav-list .titled-subnav {
    display: none;
    background: #e5e5e1;
    border-top: 1px solid #ccccc8;
    border-bottom: 1px solid #ccccc8; }
    .titled-nav-list .titled-subnav li + li a {
      border-color: #ccccc8; }
    .titled-nav-list .titled-subnav li:first-child a {
      border-top: 0; }
    .titled-nav-list .titled-subnav a {
      margin-left: 29px;
      padding-left: 0; }
      .titled-nav-list .titled-subnav a:hover, .titled-nav-list .titled-subnav a:focus {
        background: #f5f5f1;
        margin: 0;
        padding-left: 29px;
        border-color: transparent; }
      .titled-nav-list .titled-subnav a.active {
        background: #3b65a7;
        border-color: transparent;
        padding-left: 29px;
        position: relative;
        z-index: 1;
        margin: 0 -1px -1px; }
    .titled-nav-list .titled-subnav li:hover + li a {
      border-color: transparent; }
  .titled-nav-list .titled-nav li.disabled a {
    color: #999; }
  .titled-nav-list .titled-nav-footer {
    border-top: 1px solid #e5e5e1;
    padding: 11px; }
    .titled-nav-list .titled-nav-footer a {
      font-size: 12px;
      line-height: 1.5em;
      font-weight: bold; }
  .titled-nav-list + .titled-nav-list {
    margin-top: 18px; }

/**
 * Iconed titled navigation list
 * 1. Since we opted to use arrange instead of ycon_wrap (gives us the benefit
 *    of not having to pass in locale), we have to set these styles manually
 */
.titled-nav-list--iconed .titled-nav a {
  padding: 4px 11px; }
.titled-nav-list--iconed .ig-titled_nav {
  position: relative;
  padding-right: 8px; }

.titled-nav-dropdown-handler {
  display: none; }
  .responsive .titled-nav-dropdown-handler:checked ~ .titled-nav-wrapper {
    display: block; }
  .titled-nav-dropdown-handler:checked ~ .titled-nav-dropdown {
    border-radius: 5px 5px 0 0; }
  .titled-nav-dropdown-handler:checked ~ .titled-nav-dropdown .titled-nav-dropdown-expand {
    display: none; }
  .titled-nav-dropdown-handler:checked ~ .titled-nav-dropdown .titled-nav-dropdown-collapse {
    display: inline-block; }

/**
 * 1. Provides for a larger tappable area
 */
.ybtn.titled-nav-dropdown {
  padding: 0; }

.titled-nav-dropdown-icon {
  width: 0;
  height: 3px;
  display: inline-block;
  position: relative;
  margin-left: 3px;
  border-left: 4px solid transparent;
  border-right: 4px solid transparent; }

.titled-nav-dropdown-expand {
  border-top: 4px solid #333; }

.titled-nav-dropdown-collapse {
  display: none;
  top: -3px;
  border-bottom: 4px solid #333; }

.titled-nav-dropdown-trigger {
  display: block;
  padding: 12px;
  cursor: pointer;
  font-size: 16px;
  line-height: 1.3125em;
  font-weight: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none; }

@media only screen and (max-width: 989px) {
  .responsive .titled-nav-wrapper {
    display: none; } }

@media only screen and (max-width: 989px) {
  .responsive .titled-nav-list--responsive {
    border-top: 0;
    border-bottom: 0;
    border-radius: 0;
    margin: 0; }
    .responsive .titled-nav-list--responsive .titled-nav-title-section {
      background-color: #f5f5f1;
      border-bottom: 1px solid #ccccc8;
      padding-top: 24px; }
    .responsive .titled-nav-list--responsive .titled-nav {
      padding: 0 0 0 18px;
      border: 0;
      border-bottom: 1px solid #ccccc8;
      border-radius: 0;
      background: white; }
    .responsive .titled-nav-list--responsive .titled-nav li + li a {
      border-top: 0; }
    .responsive .titled-nav-list--responsive .titled-nav a {
      color: #333;
      padding: 12px 12px 12px 0;
      background: white;
      border-bottom: 1px solid #e5e5e1; }
      .responsive .titled-nav-list--responsive .titled-nav a.active {
        font-weight: normal;
        margin: 0; }
        .responsive .titled-nav-list--responsive .titled-nav a.active .time-stamp {
          color: #999;
          opacity: 1; }
    .responsive .titled-nav-list--responsive .titled-nav .cta a {
      color: #c41200;
      font-weight: bold; }
    .responsive .titled-nav-list--responsive .titled-nav li:last-child a {
      border-bottom: 0; }
    .responsive .titled-nav-list--responsive .titled-subnav {
      margin: 0;
      padding: 0;
      border: 0;
      border-bottom: 1px solid #e5e5e1; }
    .responsive .titled-nav-list--responsive .titled-subnav li:hover + li a {
      border-color: #e5e5e1; }
    .responsive .titled-nav-list--responsive .titled-subnav a {
      padding: 12px;
      margin: 0; }
    .responsive .titled-nav-list--responsive:last-child {
      border-radius: 0 0 5px 5px; }
      .responsive .titled-nav-list--responsive:last-child .titled-nav {
        border-radius: inherit; } }

/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
body {
  background: #f5f5f1; }

/**
 * Content container to keep width and padding consistent
 * within various full-width sections (header, footer, top-shelf, main content)
 */
.content-container {
  width: 960px;
  margin: 0 auto;
  padding: 0 15px; }

@media only screen and (max-width: 989px) {
  .responsive .content-container {
    width: auto; } }
/**
 * Main content wrap provides a simple page container
 */
.main-content-wrap {
  min-width: 1020px; }

@media only screen and (max-width: 989px) {
  .responsive .main-content-wrap {
    min-width: 0; } }
/**
 * Full width page container with a white background
 * for main sections of the page
 */
.main-content-wrap--full {
  background: white; }
  .main-content-wrap--full > .content-container {
    padding-top: 15px;
    padding-bottom: 36px; }

/**
 * Some www pages use a bordered container
 * rather than a full width white background for the main content
 */
.main-content-wrap--box {
  padding: 0; }
  .main-content-wrap--box > .content-container {
    border: 1px solid #ccccc8;
    border-top: none;
    background: white;
    padding: 15px 14px 30px; }
    @media screen and (min-width: 1040px) {
      .main-content-wrap--box > .content-container {
        padding: 15px 30px 30px; } }

/**
 * Main content wrapper with a border-top
 *
 * 1. Boxes already have a border
 */
.main-content-wrap--separated {
  border-top: 1px solid #ccccc8; }
  .main-content-wrap--box + .main-content-wrap--separated {
    border-top: 0; }

/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
.pagination-block {
  padding-top: 12px;
  border-bottom: 1px solid #e5e5e1;
  padding-bottom: 11px; }
  @media only screen and (max-width: 989px) {
    .responsive .pagination-block {
      text-align: center; } }
  .pagination-block .page-of-pages,
  .pagination-block .pagination-links {
    white-space: nowrap; }
    @media only screen and (max-width: 479px) {
      .responsive .pagination-block .page-of-pages, .responsive
      .pagination-block .pagination-links {
        white-space: normal; } }

.pagination-links li {
  list-style-type: none;
  display: inline; }
.pagination-links .page-option {
  display: inline-block;
  min-width: 15px;
  margin: 0;
  padding: 2px 3px;
  border: 1px solid transparent;
  text-align: center;
  background: none;
  cursor: pointer;
  -webkit-box-sizing: content-box;
  -moz-box-sizing: content-box;
  box-sizing: content-box; }
  .pagination-links .page-option:hover {
    border-color: #cbd6e7;
    background: #f0f3f8;
    text-decoration: none; }
  .pagination-links .page-option.available-number:hover {
    text-decoration: underline; }
  .pagination-links .page-option.current {
    font-weight: bold;
    color: #333;
    border-color: #e5e5e1;
    background: #f5f5f1;
    cursor: auto; }
  .pagination-links .page-option.prev-next {
    font-weight: bold; }

/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
/**
 * Always import this file if you want to use the global $z-global-list
 *
 * If you want to use a custom $z-global-list. Don't import this file.
 * Instead you should define the list in a new _z_conf.scss file
 * and import it along with 'yelp_styleguide/assets/scss/lib/z_function'
 *
 * Please read the docstring from 'yelp_styleguide/assets/scss/lib/z_function'
 * for a detailed description of the tool and learn how to use it.
 *
 *
 * 1. contains the global $z-global-list and settings overrides
 * 2. contains the public z() function
 */
/**
 * This file contains the settings overrides and main $z-global-list definition for Yelp's Styleguide.
 *
 * 1. We start our z-indexes from 1
 * 2. padding between z-indexs
 */
/**
 * $z-global-list is a z-indexes list organized in levels (indexes in the list).
 *
 * This list contains the Styleguide z-indexes.
 * When using the Styleguide in other sites you may want to
 * redefine its z-indexes in a site specific $z-global-list (_z_conf.scss)
 * and override them in a _z_overrides.scss file
 *
 * Please use the "site-" prefix when adding elements to the list:
 * Standard site prefixes are: styleguide-, common-, www-, biz-, m-, admin-
 * Please stick to the order above when defining rules and add an empty line
 * between the elements of different sites
 */
/**
 * z-index (z) function
 *
 * This file contains the z() function and default settings.
 * Please define your global (main) z-index list in a separate Sass file and override the settings there if necessary.
 * Call this file _z_conf.scss
 *
 *
 * How this thing works:
 *
 * Elements that need a z-index are stored in a Sass list that we call z-global-list.
 * z-global-list is a global variable called $z-global-list.
 * You can change this by setting the value of $z-global-list-name to a string (variable name) of your choice.
 * The list looks like the one below:
 *
 * $z-global-list: (
 *   // level 1
 *   (
 *       www-lightbox,
 *       popup,
 *   ),
 *
 *   // level 2
 *   (
 *      site-tooltip,
 *   ),
 *
 *   // level 3
 *   (
 *      www-header,
 *   ),
 *
 *   // level 4
 *   (
 *      othersite-close-btn,
 *      mobilesite-header,
 *      www-thing,
 *      common-element,
 *   )
 * );
 *
 * Each "level" in the list can either be a Sass list (if multiple elements have the same z-index)
 * or a string (one element at level n).
 * We however suggest to don't use mixed lists and enforce List of Lists
 * by enclosing one-element levels in parenthesis and adding a trailing comma. eg. (my-element,)
 *
 * Given a list like this we can use a Sass function to search the list for "site-element-name"
 * and get back the element index in the list. This would be our z-index value.
 *
 * eg.
 *
 * .lightbox {
 *   z-index: z(www-lightbox);
 * }
 *
 * output:
 * .lightbox {
 *   z-index: 1; // level 1
 * }
 *
 */
/** $z-start-offset - shift the initial index */
/**
 * $z-padding - gap between two z-index "levels" (values)
 *
 * $z-padding: 1 !default;
 *
 * Each z-index is multiplied by $z-padding
 * this creates a gap between two z-index levels that
 * we can use in case of emergency to add stuff in between.
 * z-padding can be overriden in your _z_conf.scss
 */
/**
 * $z-global-list-name - the name of the global Sass list of z-indexes
 *
 * A Sass list is like an array (Sass lists indexes start from 1)
 * and it contains element aliases.
 *
 * It is important to define the element aliases in the correct order.
 * Additionally we suggest to prefix the element aliases with the site (or app) prefix.
 * Valid site prefixes are styleguide, common, www, mobile for example.
 * Valid aliases names (examples) are styleguide-popup, www-lightbox, othersite-header.
 *
 * Each list element can either be:
 * - String: if at the given (z-)index we have only one element
 * - List (of strings): if we have multiple elements with the same z-index (in the example above ypop and lightbox)
 * - null
 * Again, elements with the same z-index (in the example above ypop and lightbox)
 * must be contained in a Sass list (comma separated list of strings, wrapped in parenthesis)
 * Levels can be null.
 *
 * IMPORTANT: You should treat each website like a "service" apart and therefore its $z-global-list MUST contain the current website indexes ONLY!
 * When using the "service" in other websites (eg. www, sub/child website etc) you may want to define a site-specific $z-global-list (in a site specific _z_conf.scss)
 * where you place the service-element alias in the desidered place (index in the list) and finally override the element z-index in a _z_overrides.scss file.
 */
/**
 * z - function: consuming the z-index list
 *
 * z($element, $element-padding, $list):
 *
 * Searches the global $list (or $list if provided) for $element
 * and return its index in the list
 *
 * eg.
 * .lightbox {
 *   z-index: z(lightbox);  // z-index: 1;
 * }
 *
 * $element-padding is a number between 0 and $z-padding
 * and can be used to increase the z-index of $element
 *
 * eg.
 * .lightbox {
 *   z-index: z(lightbox, 5);  // z-index: 6;
 * }
 *
 *
 * Reserved names:
 *
 * sandbox:
 * z-indexes are relative to the parent's one.
 * With sandbox you can isolate z-indexes from the rest of the page
 * by setting the container element z-index to `sandbox`.
 *
 * eg.
 * .container { position: relative; z-index: z(sandbox); }  // 0
 * .container_child { position: absolute; z-index: z(element); }
 *
 *
 * z-index-base:
 * Sometimes elements need a simple `z-index: 1` so that the next element in the DOM doesn't overlap.
 * This is usually easy to avoid by switching the element's order in the DOM
 * but not everyone knows that or it is not always possible.
 * Please use `z-index-base` if you need the smallest possible z-index value != 0 (or none) - usually 1.
 *
 * eg. .elem { position: relative; z-index: z(z-index-base); } // 1
 *
 *
 * Custom lists:
 * z-indexes are always relative to the parent element's one.
 * When defining component level z-indexes it may be a good idea to create a "local" z-index list
 * for the component parts.
 *
 * eg:
 * in _z_conf.scss you might have a list where you store the www-modal element:
 *
 * $z-global-list: (
 *   // other levels ... //
 *
 *   // level 5
 *   (
 *     foo-element,
 *     www-modal,
 *   )
 * )
 *
 * and in modal.scss
 *
 * // z includes _z_function.scss and _z_conf.scss
 * @import 'app/assets/scss/lib/z';
 *
 * $modal-z-indexes: (close-btn, prev-btn, next-btn);
 *
 * .modal {
 *   z-index: z(www-modal); // z-index: 5;
 * }
 *
 * // the following z-indexes are relative to the .modal (parent) one
 * .modal-close {
 *   z-index: z(close-btn, $list: $modal-z-indexes); // z-index: 1;
 * }
 *
 * .modal-prev {
 *    z-index: z(prev-btn, $list: $modal-z-indexes); // z-index: 2;
 * }
 *
 * .modal-next {
 *    z-index: z(prev-next, $list: $modal-z-indexes); // z-index: 3;
 * }
 *
 * 1. Always add the z-index-base
 */
/** Standard photo-box styles */
.photo-box .photo-box-img {
  border-radius: 4px; }

.photo-box a:visited img {
  outline: none; }

.ytype .pb-30s .photo-box-img {
  margin-top: 3px; }

/**
 * Photo box addons (actions & statuses)
 *
 * 1. Offset additional border width to prevent breaking layouts
 */
.photo-box--interactive {
  position: relative; }

.photo-box--has-error .photo-box-img {
  -webkit-box-shadow: 0 0 0 2px #c41200;
  box-shadow: 0 0 0 2px #c41200; }
  .ltie9 .photo-box--has-error .photo-box-img {
    margin: -2px;
    border: 1px solid #c41200; }

.photo-box--bordered .photo-box-img {
  -webkit-box-shadow: 0 0 0 1px #ccccc8;
  box-shadow: 0 0 0 1px #ccccc8; }
  .ltie9 .photo-box--bordered .photo-box-img {
    margin: -2px;
    border: 1px solid #ccccc8; }

/**
 * The photo box can have a background image
 *
 * 1. This is an empty div with a background image that needs a height so it won't collapse
 * 2. The thumbnail image can have different sizes, scale to fit the container
 */
.photo-box--background {
  height: 100%;
  background-position: center center;
  background-repeat: no-repeat;
  background-size: cover; }
  .photo-box--background > .photo-box-img {
    height: 100%; }

/**
 * play icon for video previews
 */
.photo-box_play-icon {
  opacity: 0.85; }
  .photo-box_play-icon:hover {
    opacity: 1; }

.photo-box--interactive .photo-box_play-icon {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  margin: auto; }

.photo-box_status {
  position: absolute;
  right: 6px;
  bottom: 6px;
  left: 6px;
  text-align: right; }

.photo-box_actions {
  position: absolute;
  top: 6px;
  left: 6px;
  right: 6px;
  z-index: 4; }

.photo-box_actions--right {
  left: auto; }
  .photo-box_actions--right .photo-box_action-link + .photo-box_action-link {
    margin: 0 0 0 3px; }

.photo-box_action-link {
  display: inline-block;
  vertical-align: middle;
  padding: 4px;
  border-radius: 3px;
  background: #333;
  background: rgba(0, 0, 0, 0.7);
  font-size: 12px;
  color: #ccccc8;
  cursor: pointer; }
  .photo-box_action-link .i {
    display: block;
    opacity: 0.7; }
  .photo-box_action-link:hover, .photo-box_action-link:focus {
    background: black;
    color: white;
    text-decoration: none; }
    .photo-box_action-link:hover .i, .photo-box_action-link:focus .i {
      display: block;
      opacity: 1; }
  .photo-box_action-link.is-active {
    color: white; }
    .photo-box_action-link.is-active .i {
      opacity: 1; }
  .photo-box_action-link + .photo-box_action-link {
    margin-left: 3px; }
  .photo-box_action-link .i-wrap {
    padding-right: 14px; }

/** Photo box with overlay for caption or other info */
.photo-box.has-overlay {
  position: relative;
  overflow: hidden;
  border-radius: 4px; }

.photo-box-overlay {
  position: absolute;
  right: 0;
  bottom: 0;
  left: 0;
  padding: 3px 6px;
  border-radius: 0 0 4px 4px;
  background: #333;
  background: rgba(0, 0, 0, 0.5);
  color: white;
  font-size: 12px;
  line-height: 1.5em;
  font-weight: bold;
  overflow: hidden;
  -webkit-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
  /*
   * Used in progressive disclosure transition, which is handled by JS
   * components (see PhotoBoxOverlay and PhotoBoxOverlayLines).
   *
   * 1. !important is necessary to override the inline bottom set by components.
   */ }
  .photo-box:hover .photo-box-overlay {
    bottom: 0 !important; }
  .photo-box-overlay a {
    color: white; }
    .photo-box-overlay a:hover {
      text-decoration: none; }
  .photo-box-overlay .additional-info {
    font-weight: normal; }
  .ltie8 .photo-box-overlay {
    width: 96%;
    padding: 3px 2%; }

.photo-box-overlay--fade {
  height: 100%;
  background: rgba(0, 0, 0, 0.35);
  background: -webkit-linear-gradient(rgba(51, 51, 51, 0) 0%, rgba(51, 51, 51, 0) 40%, rgba(51, 51, 51, 0.7) 88%, rgba(51, 51, 51, 0.7) 100%);
  background: linear-gradient(rgba(51, 51, 51, 0) 0%, rgba(51, 51, 51, 0) 40%, rgba(51, 51, 51, 0.7) 88%, rgba(51, 51, 51, 0.7) 100%); }
  .ltie9 .photo-box-overlay--fade, .ie9 .photo-box-overlay--fade {
    height: auto; }
    .ltie9 .photo-box-overlay--fade .photo-box-overlay_caption, .ie9 .photo-box-overlay--fade .photo-box-overlay_caption {
      position: static; }

.photo-box-overlay_caption {
  padding: 3px 6px 3px 1px;
  /*
   * Photo author ("by Ray Y.")
   * 1. Don't ever show a partial author string.
   */ }
  .photo-box-overlay_caption .avatar {
    position: relative; }
  .photo-box-overlay_caption .media-story {
    overflow: hidden;
    height: 36px; }
  .photo-box-overlay_caption .photo-desc {
    text-decoration: none;
    text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5); }
  .photo-box-overlay_caption .author {
    color: rgba(225, 225, 225, 0.9);
    font-weight: normal;
    white-space: nowrap; }
    .photo-box-overlay_caption .author a {
      color: rgba(225, 225, 225, 0.9); }
  .photo-box-overlay--fade .photo-box-overlay_caption {
    position: absolute;
    right: 0;
    left: 0;
    bottom: 0; }

.photo-box-overlay--large .photo-box-overlay_caption {
  padding: 12px; }

/** Photo box video */
.photo-box--video {
  cursor: pointer; }

/** Photo box biz shim */
.photo-box .biz-shim {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  /*
   * Ghastly hack to make the biz-shim clickable in IE.
   * We won't wrap the entire biz photo box markup in an <a> tag because we
   * believe Google's SEO guidelines advise against this.
   */
  background-color: white;
  opacity: 0; }
  .ltie9 .photo-box .biz-shim {
    filter: alpha(opacity=0); }

/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
/**
 * The hidden-non-responsive-<inline/block> classes are used for when you want to hide
 * content on pages without the .responsive class.
 */
.hidden-non-responsive-inline,
.hidden-non-responsive-inline-block,
.hidden-non-responsive-block,
.hidden-non-responsive-table-cell {
  display: none !important; }

.responsive {
  /**
   * The .responsive-visible-<size>-<inline/block> tags are used to only show content
   * on the size you specify.
   *
   * ┌──────────────────────────────────┬─────────────┬──────────────┬─────────────┐
   * │                                  │Small devices│Medium devices│Large devices│
   * ├──────────────────────────────────┼─────────────┼──────────────┼─────────────┤
   * │.responsive-visible-small-*       │Visible      │Hidden        │Hidden       │
   * ├──────────────────────────────────┼─────────────┼──────────────┼─────────────┤
   * │.responsive-visible-medium--only-*│Hidden       │Visible       │Hidden       │
   * ├──────────────────────────────────┼─────────────┼──────────────┼─────────────┤
   * │.responsive-visible-medium-*      │Visible      │Visible       │Hidden       │
   * ├──────────────────────────────────┼─────────────┼──────────────┼─────────────┤
   * │.responsive-visible-large-*       │Hidden       │Hidden        │Visible      │
   * ├──────────────────────────────────┼─────────────┼──────────────┼─────────────┤
   */
  /**
   * The .responsive-hidden-<size> are used to hide content for a certain size.
   *
   * ┌─────────────────────────┬─────────────┬──────────────┬─────────────┐
   * │                         │Small devices│Medium devices│Large devices│
   * ├─────────────────────────┼─────────────┼──────────────┼─────────────┤
   * │.responsive-hidden-small │Hidden       │Visible       │Visible      │
   * ├─────────────────────────┼─────────────┼──────────────┼─────────────┤
   * │.responsive-hidden-medium│Visible      │Hidden        │Visible      │
   * ├─────────────────────────┼─────────────┼──────────────┼─────────────┤
   * │.responsive-hidden-large │Visible      │Visible       │Hidden       │
   * └─────────────────────────┴─────────────┴──────────────┴─────────────┘
   */ }
  .responsive .hidden-non-responsive-inline {
    display: inline !important; }
  .responsive .hidden-non-responsive-inline-block {
    display: inline-block !important; }
  .responsive .hidden-non-responsive-block {
    display: block !important; }
  .responsive .hidden-non-responsive-table-cell {
    display: table-cell !important; }
  .responsive .responsive-visible-small-inline,
  .responsive .responsive-visible-small-inline-block,
  .responsive .responsive-visible-small-block,
  .responsive .responsive-visible-small-table-cell,
  .responsive .responsive-visible-medium-only-inline,
  .responsive .responsive-visible-medium-only-inline-block,
  .responsive .responsive-visible-medium-only-block,
  .responsive .responsive-visible-medium-only-table-cell,
  .responsive .responsive-visible-medium-inline,
  .responsive .responsive-visible-medium-inline-block,
  .responsive .responsive-visible-medium-block,
  .responsive .responsive-visible-medium-table-cell,
  .responsive .responsive-visible-large-inline,
  .responsive .responsive-visible-large-inline-block,
  .responsive .responsive-visible-large-block,
  .responsive .responsive-visible-large-table-cell {
    display: none !important; }
  @media only screen and (max-width: 479px) {
    .responsive .responsive-visible-small-inline {
      display: inline !important; }
    .responsive .responsive-visible-small-inline-block {
      display: inline-block !important; }
    .responsive .responsive-visible-small-block {
      display: block !important; }
    .responsive .responsive-visible-small-table-cell {
      display: table-cell !important; } }
  @media only screen and (min-width: 480px) and (max-width: 989px) {
    .responsive .responsive-visible-medium-only-inline {
      display: inline !important; }
    .responsive .responsive-visible-medium-only-inline-block {
      display: inline-block !important; }
    .responsive .responsive-visible-medium-only-block {
      display: block !important; }
    .responsive .responsive-visible-medium-only-table-cell {
      display: table-cell !important; } }
  @media only screen and (max-width: 989px) {
    .responsive .responsive-visible-medium-inline {
      display: inline !important; }
    .responsive .responsive-visible-medium-inline-block {
      display: inline-block !important; }
    .responsive .responsive-visible-medium-block {
      display: block !important; }
    .responsive .responsive-visible-medium-table-cell {
      display: table-cell !important; } }
  @media only screen and (min-width: 990px) {
    .responsive .responsive-visible-large-inline {
      display: inline !important; }
    .responsive .responsive-visible-large-inline-block {
      display: inline-block !important; }
    .responsive .responsive-visible-large-block {
      display: block !important; }
    .responsive .responsive-visible-large-cell {
      display: table-cell !important; } }
  @media only screen and (max-width: 479px) {
    .responsive .responsive-hidden-small {
      display: none !important; } }
  @media only screen and (min-width: 480px) and (max-width: 989px) {
    .responsive .responsive-hidden-medium {
      display: none !important; } }
  @media only screen and (min-width: 990px) {
    .responsive .responsive-hidden-large {
      display: none !important; } }

/**
 * Responsive grid utility classes. Apply these to the a row and its columns respectively
 * for a grid that collapses into a vertical stack of full width columns in non-desktop views.
 */
@media only screen and (max-width: 989px) {
  .responsive .row--responsive {
    margin: 0 auto; } }

@media only screen and (max-width: 989px) {
  .responsive .column--responsive {
    float: none;
    width: auto;
    clear: both;
    margin: 15px 0 0;
    padding: 0;
    border: 0;
    -webkit-box-shadow: none;
    box-shadow: none; }
    .responsive .column--responsive:first-child {
      margin-top: 0; } }

/**
 * 1. Prevent iPhones to adjust text size after orientation change.
 * 2. The minimum size we support for responsive pages.
 */
body.responsive {
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  text-size-adjust: 100%;
  min-width: 320px; }

/**
 * Scale down large images to fit on small screens
 */
.media--fluid,
.media--fluid img,
.media--fluid .video,
.media--fluid iframe,
.media--fluid embed {
  max-width: 100%;
  max-height: 100%; }

/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
.table {
  width: 100%;
  margin-bottom: 18px;
  /*
   * Cancel top borders on the first row.
   * 1. Cancel top border on first row when there is just a <tbody>
   */ }
  .table th,
  .table td {
    padding: 12px;
    border-top: 1px solid #e5e5e1;
    padding-top: 11px;
    text-align: left;
    vertical-align: top; }
  .table thead th,
  .table tbody:first-child tr:first-child td,
  .table tbody:first-child tr:first-child th {
    border-top: 0; }
  .table th {
    font-weight: bold; }
  .table thead th {
    vertical-align: bottom; }
  .table .text-center {
    text-align: center; }
  .table .text-right {
    text-align: right; }

.table-bordered {
  border: 1px solid #e5e5e1;
  border-collapse: separate;
  *border-collapse: collapse;
  border-left: 0; }
  .table-bordered th,
  .table-bordered td {
    border-left: 1px solid #e5e5e1; }

.table-striped {
  border: 1px solid #e5e5e1; }
  .table-striped tbody > tr:nth-child(odd) > td,
  .table-striped tbody > tr:nth-child(odd) > th {
    background-color: #f5f5f1; }

.table-simple {
  width: auto; }
  .table-simple th,
  .table-simple td {
    padding: 0 1em 0 0;
    border: none;
    vertical-align: baseline; }

.table-analytics-simple th,
.table-analytics th {
  font-weight: normal;
  font-size: 12px;
  line-height: 1em; }
.table-analytics-simple tr:first-child td,
.table-analytics tr:first-child td {
  border-color: #ccccc8; }
.table-analytics-simple tbody tr:hover,
.table-analytics tbody tr:hover {
  background: #f5f5f1; }
.table-analytics-simple .selected,
.table-analytics .selected {
  font-weight: bold;
  background: #f5f5f1; }
  .table-analytics-simple .selected a,
  .table-analytics .selected a {
    cursor: text;
    color: #333;
    text-decoration: none; }

.table-analytics-simple th,
.table-analytics-simple td {
  padding: 6px 6px 6px 0;
  border: none; }

.responsive .table-wrap {
  overflow-x: scroll; }

@media only screen and (max-width: 989px) {
  .responsive .table--responsive td,
  .responsive .table--responsive th {
    font-size: 12px;
    line-height: 1.5em;
    padding: 6px 3px;
    vertical-align: middle; } }

/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
.ypassport {
  font-size: 12px;
  line-height: 1.5em;
  /*
   * 1. We use a transparent border to separate .media-story from .media-avatar.
   *    This case doesn't use one of the standard border-width sizes so we override
   *    it here. Please avoid this and prefer one of the standard media-block gutters.
   *    If you need an other media-block with spacing(1.5) gutter, standardize it.
   */ }
  .ypassport .media-avatar {
    border-right-width: 9px; }
  .ypassport .user-display-name {
    font-size: 14px;
    line-height: 1.28571em;
    font-weight: bold; }
  .ypassport .business-owner-role {
    display: block;
    font-size: 14px;
    line-height: 1.28571em; }
  .ypassport .is-elite a {
    color: #dd5114;
    font-weight: bold; }
  .ypassport .friend-count,
  .ypassport .review-count {
    color: #555; }
  .ypassport .ghost-user {
    color: #555; }
    .ypassport .ghost-user b {
      font-size: 14px;
      line-height: 1.28571em;
      color: #333; }

.ypassport-notext .friend-count,
.ypassport-notext .review-count {
  display: inline-block;
  margin-right: 6px; }

.ypassport-slim .user-passport-stats li {
  line-height: 1;
  display: inline-block;
  margin-right: 6px; }
.ypassport-slim .business-owner-role {
  font-size: 12px;
  line-height: 1.5em; }

.business-owner-photo--medium .photo-box-img {
  width: 60px;
  height: 60px; }

/**
 * Display Utility Classes
 */
.hidden {
  display: none; }

.inline-block {
  display: -moz-inline-stack;
  display: inline-block; }
  .ltie8 .inline-block {
    display: inline;
    zoom: 1; }

.ltie8 .ieSucks {
  zoom: 1; }

/**
 * Vertical centering for block elements
 * See http://www.jakpsatweb.cz/css/css-vertical-center-solution.html for the lowdown.
 * For IE6/7 to imitate the vertical-center, an extra element is needed (ie-cell-hack).
 * So far, this is the most reliable method for vertical-centering elements of unknown height.
 *
 * Note: please don't use this for displaying tabular data. Use REAL tables for that.
 * 1. Strange behavior in IE7 on ad preview page on biz site: without overflow:hidden,
 *    the review ad appears overlapping the ad description and right under the offer ad, before
 *    jumping back to its rightful place. Totally WTF
 * 2. We use these utility classes as a temporary fix for the use of
 *    different buttons and islands inside of the .hd-ui element when
 *    using the .header-with-ui component so they would align nicely with
 *    the heading next to it.
 */
.display-table {
  display: table;
  position: relative; }
  .ltie8 .display-table {
    zoom: 1;
    overflow: hidden; }
  .display-table .display-table-cell {
    display: table-cell !important;
    vertical-align: middle !important; }
    .ltie8 .display-table .display-table-cell {
      position: relative;
      top: 50%; }
    .ltie8 .display-table .display-table-cell .ie-tablecell-hack {
      position: relative;
      top: -50%; }

.align-top {
  vertical-align: top; }

.align-middle {
  vertical-align: middle; }

/**
 * Element hiding based on availability of JS. .no-js is set by default on the html tag
 * and changed to .js by javascript on page load.
 */
.no-js .no-js-hidden,
.js .js-hidden {
  display: none !important; }

.no-js .no-js-block {
  display: block !important; }

/** Hide content that should not be displayed in a webview */
.webview .webview-hidden,
.webview-iphone .webview-iphone-hidden,
.webview-ipad .webview-ipad-hidden,
.webview-android .webview-android-hidden {
  display: none !important; }

/**
 * Hide device specific content that doesn't match the current device.
 * i.e. you're on an iphone; don't show ipad or android specific content
 */
.webview-iphone .webview-ipad-visible,
.webview-iphone .webview-android-visible,
.webview-ipad .webview-iphone-visible,
.webview-ipad .webview-android-visible,
.webview-android .webview-iphone-visible,
.webview-android .webview-ipad-visible {
  display: none !important; }

/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Flexbox Mixins
 * Uses a mix of old and new syntaxes for maximum support.
 * See http://css-tricks.com/using-flexbox/
 *
 * Caution: flexbox implementations are still inconsistent across browsers,
 * so as always it's important to test your code!
 */
/*
* 1. OLD - iOS 6-, Android, Safari 3.1-6
* 2. OLD - Firefox 21-
* 3. TWEENER - IE 10
* 4. NEW - Chrome
* 5. NEW, Spec - Opera 12.1, Firefox 22+
*/
/*
 * 1. OLD - iOS 6-, Android, Safari 3.1-6
 * 2. OLD - Firefox 21-
 * 3. Chrome
 * 4. IE 10
 */
/*
 * 1. OLD - iOS 6-, Safari 3.1-6
 * 2. OLD - Firefox 21-
 *    Default is 1, so we add 1; see:
 *    https://developer.mozilla.org/en-US/docs/Web/CSS/-moz-box-ordinal-group
 * 3. TWEENER - IE 10
 * 4. NEW - Chrome
 * 5. NEW, Spec - Opera 12.1, Firefox 22+
 */
/**
 * Layout Utility Classes
 */
.clearfix {
  *zoom: 1; }
  .clearfix:before, .clearfix:after {
    content: " ";
    display: table; }
  .clearfix:after {
    clear: both; }

.absolute-fill {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0; }

/**
 * Floats
 */
.pull-left {
  float: left; }

.pull-right {
  float: right; }

/**
 * Flexbox utilities
 *
 * Caution: flexbox implementations are still inconsistent across browsers,
 * so as always it's important to test your code!
 */
.flex-container {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  width: 100%; }

.flex-container-inline {
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -ms-inline-flexbox;
  display: -webkit-inline-flex;
  display: inline-flex;
  width: 100%; }

.flex-box {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1; }

.flex-center {
  -webkit-box-align: center;
  -moz-box-align: center;
  -ms-flex-align: center;
  box-align: center;
  -webkit-align-items: center;
  align-items: center; }

.flex-column {
  -webkit-box-direction: normal;
  -webkit-box-orient: vertical;
  -webkit-flex-direction: column;
  -moz-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column; }

.flex-wrap {
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap; }

.flex-container-column {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  -webkit-box-direction: normal;
  -webkit-box-orient: vertical;
  -webkit-flex-direction: column;
  -moz-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%; }
  .flex-container-column > .flex-box {
    /**
     * Allow flex box to grow, but prevent shrinking
     * in column layout
     */
    -webkit-box-flex: 1 0 auto;
    -moz-box-flex: 1 0 auto;
    -webkit-flex: 1 0 auto;
    -ms-flex: 1 0 auto;
    flex: 1 0 auto; }

/**
 * Deprecated - Don't use this!
 * Removes the default margin-bottom: 10px; of paragraphs.
 */
p.nobtm {
  margin-bottom: 0; }

/**
 * Flexbox Mixins
 * Uses a mix of old and new syntaxes for maximum support.
 * See http://css-tricks.com/using-flexbox/
 *
 * Caution: flexbox implementations are still inconsistent across browsers,
 * so as always it's important to test your code!
 */
/*
* 1. OLD - iOS 6-, Android, Safari 3.1-6
* 2. OLD - Firefox 21-
* 3. TWEENER - IE 10
* 4. NEW - Chrome
* 5. NEW, Spec - Opera 12.1, Firefox 22+
*/
/*
 * 1. OLD - iOS 6-, Android, Safari 3.1-6
 * 2. OLD - Firefox 21-
 * 3. Chrome
 * 4. IE 10
 */
/*
 * 1. OLD - iOS 6-, Safari 3.1-6
 * 2. OLD - Firefox 21-
 *    Default is 1, so we add 1; see:
 *    https://developer.mozilla.org/en-US/docs/Web/CSS/-moz-box-ordinal-group
 * 3. TWEENER - IE 10
 * 4. NEW - Chrome
 * 5. NEW, Spec - Opera 12.1, Firefox 22+
 */
/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
/**
 * Media block utility
 */
.media-block {
  position: relative;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex; }

.media-title a {
  font-weight: bold; }

.media-story {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1; }

.media-block > .media-avatar {
  border-right: 6px solid transparent;
  border-left: none; }
.media-block--12 > .media-avatar {
  border-right: 12px solid transparent;
  border-left: none; }
.media-block--18 > .media-avatar {
  border-right: 18px solid transparent;
  border-left: none; }
.media-block--24 > .media-avatar {
  border-right: 24px solid transparent;
  border-left: none; }
.media-block--30 > .media-avatar {
  border-right: 30px solid transparent;
  border-left: none; }
.media-block--36 > .media-avatar {
  border-right: 36px solid transparent;
  border-left: none; }
.media-block--42 > .media-avatar {
  border-right: 42px solid transparent;
  border-left: none; }

/*
 * If you need to create a media block with the avatar on the right
 * with .media-avatar--right, you also have to place the media-avatar
 * below the media-story in the source code in order for the IE9 and IE8
 * fallbacks to work properly.
 */
.media-avatar--right {
  -webkit-box-ordinal-group: 1;
  -moz-box-ordinal-group: 2;
  -ms-flex-order: 1;
  -webkit-order: 1;
  order: 1; }
  .media-block > .media-avatar--right {
    border-left: 6px solid transparent;
    border-right: none; }
  .media-block--12 > .media-avatar--right {
    border-left: 12px solid transparent;
    border-right: none; }
  .media-block--18 > .media-avatar--right {
    border-left: 18px solid transparent;
    border-right: none; }
  .media-block--24 > .media-avatar--right {
    border-left: 24px solid transparent;
    border-right: none; }
  .media-block--30 > .media-avatar--right {
    border-left: 30px solid transparent;
    border-right: none; }
  .media-block--36 > .media-avatar--right {
    border-left: 36px solid transparent;
    border-right: none; }
  .media-block--42 > .media-avatar--right {
    border-left: 42px solid transparent;
    border-right: none; }

/**
 * IE9 and IE8 fallback
 */
.ie .media-block {
  display: table;
  width: 100%; }
.ie .media-avatar,
.ie .media-story {
  display: table-cell;
  vertical-align: top; }
.ie .media-story {
  width: 100%; }

/**
 *  IE7
 */
.ltie8 .media-block {
  *zoom: 1; }
.ltie8 .media-block,
.ltie8 .media-story {
  width: auto;
  overflow: hidden; }
.ltie8 .media-story {
  width: auto;
  overflow: hidden; }
.ltie8 .media-avatar {
  float: left; }
  .ltie8 .media-avatar.media-avatar--right {
    float: right; }

/**
 * TODO (jverrecc|2015-01-13): Hmm, these styles are very case-specific
 * and probably don't belong to this file, which is the general media-block
 * implementation. Not sure where to move them, but in the meantime, let's
 * try not to add more things here.
 *
 * Dynamic content tied to the media avatar
 * We want to set some defaults here except for the positioning
 * itself, which depends on the asset's dimensions.
 *
 * 1. This will contain the 3 dynamic parts we want to show,
 *    being: ad pill, business title and review rating.
 * 2. We only need the stars
 */
.media-avatar--dynamic {
  position: relative; }

.media-avatar--dynamic_content {
  position: absolute; }
  .media-avatar--dynamic_content .yloca-tip {
    margin-top: 3px; }
  .media-avatar--dynamic_content .title {
    font-weight: normal;
    margin-bottom: 6px; }
  .media-avatar--dynamic_content .biz-name {
    font-size: 16px;
    line-height: 1.3125em; }
  .media-avatar--dynamic_content .rating-qualifier {
    display: none; }

/**
 * Off screen hidden text to display content to screen readers
 */
.offscreen {
  clip: rect(0 0 0 0);
  position: absolute;
  left: -9999px;
  top: auto;
  overflow: hidden;
  width: 1px;
  height: 1px; }

/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * Text-level Utility Classes
 */
.text-centered {
  text-align: center; }

.text-right {
  text-align: right; }

.nowrap {
  white-space: nowrap; }

/**
 * Truncates the contained text with an ellipsis ("...") instead of going to a new line.
 * The text to truncate must be a block.
 */
.truncate {
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap; }

/**
 * Make text in a container unselectable. For compatibility with older versions of IE,
 * add: unselectable="on" to the container's attributes.
 */
.unselectable {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  -o-user-select: none;
  user-select: none; }

/**
 * Subtle white shadow to make text look embossed (on gray background only)
 */
.embossed-text-white {
  text-shadow: 0 1px rgba(255, 255, 255, 0.7); }

/**
 * Pseudo link
 * Utility to make any element (button, etc) appear like a link
 */
.u-pseudo-link {
  margin: 0;
  padding: 0;
  background: none;
  border: 0;
  outline: 0;
  color: #3b65a7;
  cursor: pointer; }
  .u-pseudo-link:hover, .u-pseudo-link:focus {
    text-decoration: underline; }

/**
 * Break word
 * Breaks words when too long to avoid text overflow
 *
 * 1. Fallback
 * 2. WebKit Only - not standard
 * 3. CSS3 standard (new)
 * 4. Better use hyphens when supported.
 *    It works only on some browsers and the parent should have a lang attribute set.
 */
.u-break-word {
  word-wrap: break-word;
  word-break: break-word;
  overflow-wrap: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto; }

/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * Standard clearfix, from HTML5 Boilerplate.
 * 1. Necessary for ie7.
 */
/**
 * Colors used across the Yelp app.  Avoid referencing literal color vars directly
 * and instead prefer functional color names defined below.
 *
 * Caution: The styleguide servlet parses this file and expects it to be a
 * list of literal color definitions, followed by functional color name mapped to literal colors.
 * Please don't break that.
 */
/** Functional colors */
/**
 * CSS3 Mixin Helpers
 * Adds prefixes for commonly used CSS3 properties.
 *
 * Note that border-radius is intentionally missing.  This property no longer
 * requires prefixing due to wide support.
 */
/*
 * Low-level helper that should only be used in this file. It generates both
 * prefixed and unprefixed rules.
 *
 * Inspired by Bourbon (https://github.com/thoughtbot/bourbon)
 */
/** Transform (IE9+) */
/** Transition (IE10+) */
/** Animation (IE10+) */
/** Column Count (IE10+) */
/**
 * Box Shadow (IE9+)
 * If you need multiple shadows, use double parens, or the comma will break the compilation:
 *
 * @include box-shadow((
 *     1px 1px black,
 *     2px 2px red
 *));
 */
/**
 * Box Sizing (IE8+)
 * For IE7, use fallback (override widths with fixed px values)
 */
/** User Select (IE10+) */
/** Background Size (IE9+) */
/** Background clipping (IE9+) */
/**
 * Form control appearance
 * (not supported on IE and opera, ok for all other browsers)
 */
/** Linear Gradients */
/*
 * A primitive convenience mixin that covers probably 95% of gradient use cases,
 * which is a simple, horizontal or vertical 2-tone linear gradient.  The remaining
 * use cases will require manually prefixing gradients the old school way, e.g.
 * multiple backgrounds (image and gradient), or 3+ color stops.
 */
/* A fallback mixin for linear gradients. To provide a fallback color use one of
 * the following options:
 * - Provide a color value (rgb, rgba, hex, color name).
 * - Provide a keyword: "start" or "stop" (w/o quotation marks) to use the first or second
 * parameter provided to the mixin as fallback color.
 * If no fallback is provided, the mix of $from and $to is calculated
 * and set as background color.
 */
/*
 * Extends linear-gradient mixin by providing a fallback.
 * The fallback parameter is optional. However, if you use color-stops in your gradient you
 * MUST provide a fallback, otherwise the compiler will throw an error.
 */
/*
 * A mixin for linear gradients that also have an image on top. Everything else is the same
 * as the linear-gradient mixin.
 */
/** Blur */
/**
 * RGBA Attributes
 *
 * A family of mixins that bundles a fallback and rgba color for usage in a CSS property.
 * Refer to base mixin transparent-color-property.
 *
 */
/*
 * Generic mixin that bundles a fallback and rgba color for usage in specified
 * CSS property
 *
 * If a fallback color is not provided, the fallback defaults to the opaque version of color
 */
/*
 * Mixin to handle transparent background-color with a fallback
 *
 * Usage:
 *
 * 1. Use default fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8));
 * }
 *
 * 2. Provide explicit fallback
 * p {
 *     @include rgba-background-color(rgba(0, 0, 0, 0.8), #111);
 * }
 *
 *
 * Result:
 *
 * 1.
 * p {
 *    background-color: black;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 *
 * 2.
 * p {
 *    background-color: #111;
 *    background-color: rgba(0, 0, 0, 0.8);
 * }
 */
/**
 * A grid how-to
 *
 * The following markup/css creates a two column layout with a border between
 * the columns. The sidebar has some padding at the top and bottom and smaller text.
 *
 * markup:
 *	<div class="content-wrapper">
 *		<div class="main-content"> ... </div>
 *		<div class="sidebar"> ... </div>
 *	</div>
 *
 * css:
 *	.content-wrapper {
 *		@include row();
 *	}
 *
 *	.main-content {
 *		@include column(8, 12);
 *		@include grid-column-border(right);
 *	}
 *
 *	.sidebar {
 *		@include column(4, 12);
 *		@include grid-column-border(left, $shift: true); // shift prevents a double border
 *
 *		@include font-size($small-font-size);
 *		padding: spacing(2) 0; // mixin ensures consistant spacing
 *	}
 *
 * TODO(msamuels|2013-4-15): Add a more comprehensive example or reference tool
 */
/* Calculates spacing units in px for a given # of baselines.
 * ex:
 * padding: spacing(3, $offset: 1px); => padding: 17px;
 *
 * $lines - integer # of spacing units to return
 * $offset - pixel value of any offsets (such as borders), defaults to 0
 */
/*------------------------------------*\
    ROWS
\*------------------------------------*/
/* Row mixin
 * Apply to the containing element of a set of nested columns
 *
 * Note: the same element will never be both a row and a column
 */
/* The rules required to make a row responsive; */
/* Responsive row mixin
 * Use this in conjunction witht the column-responsive() mixin for responsive grids
 */
/*------------------------------------*\
    COLUMNS
\*------------------------------------*/
/* Helper function that returns width for a given # of columns as a percent
 *
 * $columns - # of columns to get width for
 * $context - width of containing element in columns
 */
/* Helper function that returns width for a given # of columns in pixels
 *
 * $columns - # of columns to get width for
 */
/* Column mixin
*  Align an element to the grid
*
*  $columns - The # of columns to span
*  $context - Nesting context, the # of columns spanned by the containing element
*  $fixed-width - Optional flag to fix the element's width in pixels (rather than set as a percent)
*/
/* Rules for building a column that stacks in non-desktop viewports. */
/* Responsive column mixin
 * Like the standard column, except this column will become a full width in
 * any non-desktop viewport. Should be nested inside of a row built with the
 * row-responsive() mixin.
 *
 * $columns - The # of columns to span
 * $context - Nesting context, the # of columns spanned by the containing element
 * $breakpoint - The breakpoint name to apply the column-responsive-rules rules
 */
/*------------------------------------*\
    BORDERS
\*------------------------------------*/
/* Special border mixin for creating vertical borders on grid column elements
 * Use to create a vertical border between column elements
 *
 * $side - Where border should appear (left or right)
 * $shift - Optional flag to avoid double border and create the appearance of
 *   equal height columns.
 */
/* Special border mixin for creating horizontal borders on grid row elements
 * Prevents border from spilling over into the gutters
 * Use to create a horizontal border on a row element
 *
 * $pos - Where border appears in relation to grid row element (before or after)
 * $lines - integer # of spacing units that border and whitespace should maintains
 */
/* Border mixin
 * Apply a border to any side of an element and set padding to maintain spacing
 *
 * $side - Side to which border is applied
 * $lines - integer # of spacing units that border and whitespace should maintains
 * $width - Border width in pixels
 * $border-style - Border style (solid, dotted, etc)
 * $color - Border color
 */
/*------------------------------------*\
    TYPE
\*------------------------------------*/
/* Set font size on an element and set line-height to maintain vertical spacing
 *
 * $font-size - Font-size in pixels (use a font-size variable)
 * $lines - Optional override integer # of spacing units to use as line height (this is rarely necessary)
 */
/*------------------------------------*\
    MEDIA QUERIES
\*------------------------------------*/
/**
 * Mixins to get the media query for given size.
 */
.top-shelf {
  width: 100%;
  min-width: 1020px;
  position: relative;
  padding-top: 15px; }
  .top-shelf h1 {
    padding-top: 0;
    font-size: 36px;
    line-height: 1.16667em; }
  .top-shelf .intro {
    font-size: 16px;
    line-height: 1.3125em; }
    .top-shelf .intro h1 + p {
      margin-top: 18px; }

.top-shelf-grey {
  background: #f5f5f1;
  border-bottom: 1px solid #ccccc8; }

/**
 * Mixin to detect devices that support higher resolution images.
 *
 * Example usage:
 * .logo {
 *     background-image: image-url('logo.png');
 *     background-size: 20px;
 *
 *     @include pixel-ratio-2x {
 *         background-image: image-url('logo@2x.png');
 *     }
 * }
 */
.main-header {
  background: #af0606 url("/img/structural/header_stars.png") no-repeat center;
  background: url("/img/structural/header_stars.png") no-repeat center, -webkit-linear-gradient(#c41200, #af0606);
  background: url("/img/structural/header_stars.png") no-repeat center, -moz-linear-gradient(#c41200, #af0606);
  background: url("/img/structural/header_stars.png") no-repeat center, linear-gradient(#c41200, #af0606); }
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    .main-header {
      background: #af0606 url("/img/structural/header_stars@2x.png") no-repeat center;
      background: url("/img/structural/header_stars@2x.png") no-repeat center, -webkit-linear-gradient(#c41200, #af0606);
      background: url("/img/structural/header_stars@2x.png") no-repeat center, -moz-linear-gradient(#c41200, #af0606);
      background: url("/img/structural/header_stars@2x.png") no-repeat center, linear-gradient(#c41200, #af0606);
      background-size: 1380px auto, 100%; } }

.main-header_logo,
.ytype .main-header_logo {
  background: url("/img/structural/header_logo.png") no-repeat; }
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    .main-header_logo,
    .ytype .main-header_logo {
      background-image: url("/img/structural/header_logo@2x.png"); } }
  @media only screen and (max-width: 989px) {
    .responsive .main-header_logo, .responsive
    .ytype .main-header_logo {
      background: url("/img/structural/biz_header_logo.png") no-repeat; } }
  @media only screen and (max-width: 989px) and (-webkit-min-device-pixel-ratio: 2), only screen and (max-width: 989px) and (min-resolution: 192dpi) {
    .responsive .main-header_logo, .responsive
    .ytype .main-header_logo {
      background-image: url("/img/structural/biz_header_logo@2x.png"); } }

.main-header--slim .main-header_logo {
  background: url("/img/structural/biz_header_logo.png") no-repeat;
  background-size: 90px 47px; }
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    .main-header--slim .main-header_logo {
      background-image: url("/img/structural/biz_header_logo@2x.png"); } }

@media only screen and (max-width: 989px) {
  .responsive .top-shelf {
    width: auto; } }
.darwin-image {
  background-color: #f5f5f1; }

.post-info {
  margin-bottom: 24px;
  margin-top: 24px; }
  .post-info img {
    margin-right: 6px;
    max-height: 60px;
    max-width: 60px; }
  .post-info .post-date {
    font-size: 14px; }

.front-page .main-heading {
  padding-bottom: 24px; }
.front-page .post-info {
  margin-bottom: 12px;
  margin-top: 12px; }
  .front-page .post-info img {
    max-height: 30px;
    max-width: 30px; }

.monthly-archive h2 {
  padding-bottom: 6px; }

.post-preview {
  line-height: 1.6; }

.posts article {
  border-bottom: 1px solid #e5e5e1;
  margin-bottom: 24px;
  padding-bottom: 24px; }
  .posts article:last-child {
    margin-bottom: 0; }

.post h1,
.post .post-info,
.post .post-content {
  max-width: 700px; }
.post h1 {
  padding-top: 24px; }
.post h2 {
  padding-top: 18px; }
.post .post-info ul {
  list-style: none;
  margin: 0; }
.post ul, .post ol {
  list-style: disc;
  margin-left: 20px;
  margin-bottom: 20px; }

.post-content {
  font-size: 16px;
  line-height: 1.6; }
  .post-content img {
    border-radius: 4px;
    margin-top: 12px;
    margin-bottom: 12px;
    width: 100%; }

.image-caption {
  position: relative; }
  .image-caption p {
    font-size: 13px;
    margin-bottom: 18px;
    text-align: center; }

.back-to-blog {
  margin-bottom: 0;
  margin-top: 30px;
  padding-bottom: 12px; }

.job-posting {
  background: #dff1ff;
  border: 1px solid #a5d2da;
  margin-bottom: 12px;
  margin-top: 42px; }
  .job-posting .ybtn {
    width: 100px; }

.social-media {
  margin-top: 54px; }
  .social-media .right-buttons {
    float: right; }

/**
 * Blockquotes
 */
blockquote {
  color: #e5e5e1;
  border-left: 4px solid #e5e5e1;
  padding-left: 10px;
  font-size: 18px;
  letter-spacing: -1px;
  font-style: italic; }
  blockquote > :last-child {
    margin-bottom: 0; }

/**
 * Code formatting
 */
pre,
code {
  font-size: 15px;
  border: 1px solid #e5e5e1;
  border-radius: 3px;
  background-color: #eef; }

code {
  padding: 1px 5px; }

pre {
  padding: 8px 12px;
  overflow-x: scroll; }
  pre > code {
    border: 0;
    padding-right: 0;
    padding-left: 0; }

/**
 * Syntax highlighting styles
 */
.highlight {
  background: #fff; }
  .highlight .c {
    color: #998;
    font-style: italic; }
  .highlight .err {
    color: #a61717;
    background-color: #e3d2d2; }
  .highlight .k {
    font-weight: bold; }
  .highlight .o {
    font-weight: bold; }
  .highlight .cm {
    color: #998;
    font-style: italic; }
  .highlight .cp {
    color: #999;
    font-weight: bold; }
  .highlight .c1 {
    color: #998;
    font-style: italic; }
  .highlight .cs {
    color: #999;
    font-weight: bold;
    font-style: italic; }
  .highlight .gd {
    color: #000;
    background-color: #fdd; }
  .highlight .gd .x {
    color: #000;
    background-color: #faa; }
  .highlight .ge {
    font-style: italic; }
  .highlight .gr {
    color: #a00; }
  .highlight .gh {
    color: #999; }
  .highlight .gi {
    color: #000;
    background-color: #dfd; }
  .highlight .gi .x {
    color: #000;
    background-color: #afa; }
  .highlight .go {
    color: #888; }
  .highlight .gp {
    color: #555; }
  .highlight .gs {
    font-weight: bold; }
  .highlight .gu {
    color: #aaa; }
  .highlight .gt {
    color: #a00; }
  .highlight .kc {
    font-weight: bold; }
  .highlight .kd {
    font-weight: bold; }
  .highlight .kp {
    font-weight: bold; }
  .highlight .kr {
    font-weight: bold; }
  .highlight .kt {
    color: #458;
    font-weight: bold; }
  .highlight .m {
    color: #099; }
  .highlight .s {
    color: #d14; }
  .highlight .na {
    color: #008080; }
  .highlight .nb {
    color: #0086B3; }
  .highlight .nc {
    color: #458;
    font-weight: bold; }
  .highlight .no {
    color: #008080; }
  .highlight .ni {
    color: #800080; }
  .highlight .ne {
    color: #900;
    font-weight: bold; }
  .highlight .nf {
    color: #900;
    font-weight: bold; }
  .highlight .nn {
    color: #555; }
  .highlight .nt {
    color: #000080; }
  .highlight .nv {
    color: #008080; }
  .highlight .ow {
    font-weight: bold; }
  .highlight .w {
    color: #bbb; }
  .highlight .mf {
    color: #099; }
  .highlight .mh {
    color: #099; }
  .highlight .mi {
    color: #099; }
  .highlight .mo {
    color: #099; }
  .highlight .sb {
    color: #d14; }
  .highlight .sc {
    color: #d14; }
  .highlight .sd {
    color: #d14; }
  .highlight .s2 {
    color: #d14; }
  .highlight .se {
    color: #d14; }
  .highlight .sh {
    color: #d14; }
  .highlight .si {
    color: #d14; }
  .highlight .sx {
    color: #d14; }
  .highlight .sr {
    color: #009926; }
  .highlight .s1 {
    color: #d14; }
  .highlight .ss {
    color: #990073; }
  .highlight .bp {
    color: #999; }
  .highlight .vc {
    color: #008080; }
  .highlight .vg {
    color: #008080; }
  .highlight .vi {
    color: #008080; }
  .highlight .il {
    color: #099; }
